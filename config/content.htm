<h1>關於</h1>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">工程師在解決問題之前，會</span></span><span style="background-color: #ffff99;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">先找資料</span></span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">，看看這些問題是否已經有人提出了解決方案，然後再</span></span><span style="background-color: #ffff99;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">分析資料</span></span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">是否解決了自己所解決的問題，開發者</span><span style="vertical-align: inherit;">應該再</span><span style="vertical-align: inherit;">解決問題，還必須能夠判斷否能直接引用該方案，有沒有適法性的問題。</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">既可以解決問題，又可以解決問題，並且沒有適合的問題，可以有針對性的思考，可以單獨力或結合其他團隊，</span></span><span style="background-color: #ffff99;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">打造工具</span></span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">，讓用戶之後遇到相同或類似的問題，可以更方便地解題。</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">W8配合電腦輔助設計室所建立的</span></span><a href="https://drive.google.com/file/d/1MwUQNWATIgwWoT--HELUHcepNsNi4uTP/view?usp=sharing"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">portable_hybrid.7z</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">可攜式示範環境系統。</span></span></p>
<p><a href="https://drive.google.com/file/d/1MwUQNWATIgwWoT--HELUHcepNsNi4uTP/view?usp=sharing"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">portable_hybrid.7z</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">下載檔案約 350MB，解開壓縮檔案後約 1GB。</span></span></p>
<p style="padding-left: 30px;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">注：portable_hybrid.7z 是保存在 2021fall At mde 的 GDrive 中。</span></span></p>
<p><span style="background-color: #ffff99;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">是的重點在於您希望建立樣貌的學習歷程檔案嗎？</span></span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">破壞</span><span style="vertical-align: inherit;">學習是一段</span></span><a href="https://www.oxfordlearnersdictionaries.com/definition/english/journey_1?q=journey"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">旅程</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">，你希望踏上一段</span><span style="vertical-align: inherit;">進入大學的</span><span style="vertical-align: inherit;">歷程？</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">是人回味無窮嗎？</span><span style="vertical-align: inherit;">抑或悔不行動？</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">何謂 </span></span><a href="https://www.oxfordlearnersdictionaries.com/definition/english/academic_1?q=academic"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">學術</span></span></a> <a href="https://www.oxfordlearnersdictionaries.com/definition/english/portfolio"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">組合</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">（學習歷程檔案）？</span></span></p>
<p style="padding-left: 30px;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">學術可翻譯為的，而學術檔案夾指的是文件檔案夾，可以引申為資料或檔案的組合，刪除又將這些的創建時間重新啟用，也可以將這些歷史檔案組合，所以學術檔案就被翻譯為學術歷程檔案、或學習歷程檔案，在此</span></span><span style="background-color: #ccffcc;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">學術檔案組合中特指大學時期與學習有關的歷史檔案組合</span></span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">。</span></span></p>
<p style="padding-left: 30px;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">學術作品集內容就是專業核心課程學習歷程的綜合形象，未來無論是學習還是研究推甄，學習歷程檔案就是可評申請者是否符合規定的重要指標。</span></span></p>
<p style="padding-left: 30px;"><a href="https://www.uts.edu.au/research-and-teaching/learning-and-teaching/scholarship-and-research/scholarship-learning-and-teaching/developing-academic-portfolio"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">https://www.uts.edu.au/research-and-teaching/learning-and-teaching/scholarship-and-research/scholarship-learning-and-teaching/developing-academic-portfolio</span></span></a></p>
<p style="padding-left: 60px;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">作品集通過創建一個關於你的反思（反思）、發展（開發、研究）和成就（成果、成就）的記錄來支持你作為學者的角色。</span><span style="vertical-align: inherit;">您可能喜歡使用作品集的方面（縱向）為正式試用（試用期）審查、進展（進展）或升職（升職）過程提供證據（報導）。</span></span></p>
<p style="padding-left: 30px;"><a href="https://www.hr.uwa.edu.au/working/academic/portfolio"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">https://www.hr.uwa.edu.au/working/academic/portfolio</span></span></a></p>
<p style="padding-left: 60px;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">學術檔案是對你的主要活動和成就（成果）的總結，記錄你的貢獻（貢獻）的性質和程度，以及你的角色和成就。</span><span style="vertical-align: inherit;">它具有三個主要組成部分（或作品集），由您的簡歷 (CV) 提供支持。</span></span></p>
<p style="padding-left: 60px;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">這裡指的三項學術歷程檔案，即教學（包括教課與學習）、研究（研究）與服務等三項工作內容的組合。</span></span></p>
<p style="padding-left: 60px;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">教學——課程內容有無與時俱進，逐步提升內容與教學方法，以符合時代要求。</span></span></p>
<p style="padding-left: 60px;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">研究——對於所開設的課程或與業界相關的研究主題，是否繼續鑽研學習。</span></span></p>
<p style="padding-left: 60px;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">服務 - 是否將教學與研究成果，提供給公眾使用。</span></span></p>
<p style="padding-left: 30px;"><a href="https://www.utu.fi/en/university/come-work-with-us/academic-portfolio"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">https://www.utu.fi/en/university/come-work-with-us/academic-portfolio</span></span></a></p>
<p style="padding-left: 60px;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">一個好的作品集是全面的((範圍)整體)、簡短的((內容)簡短)、簡潔的。</span><span style="vertical-align: inherit;">((用詞)簡潔) 大學推薦的學術作品集的最大長度為五頁。</span><span style="vertical-align: inherit;">學院可能會提供有關附錄的質量和數量的更詳細信息。</span></span><br/><br/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">投資組合的創建有多種目的，最重要的情況是招聘（招募人才）。</span><span style="vertical-align: inherit;">作品集也是員工培養專業知識的絕佳方式，也可以用於開發討論和建立工作單位的職位說明書。</span></span></p>
<p style="padding-left: 30px;"><a href="https://www.huronconsultinggroup.com/insights/academic-portfolio-data-collaboration-teach"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">https://www.huronconsultinggroup.com/insights/academic-portfolio-data-collaboration-teach</span></span></a></p>
<p style="padding-left: 60px;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">成功管理學術檔案需要持續（持續）協作（協同）和數據使用。</span><span style="vertical-align: inherit;">過程中有許多利益相關者，強調協作的重要性不僅有助於投資組合管理，而且有助於機構的使命（委託）和願景（願景）。</span><span style="vertical-align: inherit;">機構和學術領袖可以協調有關戰略活動和信息管理的對話，以加強長期學術規劃。</span></span><br/><br/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">此外，當領導者將項目級別的成本和數據作為學術組合管理的一部分進行審查時，他們將能夠確定重新分配資金以支持資源密集型學術項目的機會。</span><span style="vertical-align: inherit;">更好地訪問這些數據也將提高學習、進步和畢業成果的可見性。</span><span style="vertical-align: inherit;">隨著學術領導和教師之間的關係和協作的加強，決策（決策）、資源配置（資源配置）和數據分析將得到改善。</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">這是計算機課程課程 2021 Fall 的虛擬與網站模板</span></span></p>
<hr/>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">demo學號與賬號：41023218</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">網站電子：<a href="https://github.com/snowfall-killer/cp2021_hw">https://github.com/snowfall-killer/cp2021_hw</a></span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">網站鏈接：<a href="https://snowfall-killer.github.io/cp2021_hw/">https://snowfall-killer.github.io/cp2021_hw/</a></span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">其他與個人或作業相關資料說明或介紹：</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">mdecourse 國內的實驗室：<a href="https://mde.tw/#/">https://mde.tw</a></span></span></p>
<h2>便攜式混合動力車</h2>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">W8配合電腦輔助設計室所建立的</span></span><a href="https://drive.google.com/file/d/1MwUQNWATIgwWoT--HELUHcepNsNi4uTP/view?usp=sharing"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">portable_hybrid.7z</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">可攜式示範環境系統。</span></span></p>
<p style="padding-left: 30px;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">注：portable_hybrid.7z 是保存在 2021fall At mde 的 GDrive 中。</span></span></p>
<p><a href="https://drive.google.com/file/d/1MwUQNWATIgwWoT--HELUHcepNsNi4uTP/view?usp=sharing"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">portable_hybrid.7z</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">下載檔案約 350MB，解開壓縮檔案後約 1GB。</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">此版本包含</span></span><a href="https://www.fossil-scm.org"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">https://www.fossil-scm.org</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">，當各組建立Fossil SCM服務器時必須自己在Windows和Ubuntu操作系統中下載當時最新的Fossil SCM版本。</span></span></p>
<h4><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">portable_hybrid 可攜程序系統介紹：</span></span></h4>
<p style="padding-left: 30px;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">此版本是配合電腦輔助設計室2021年秋季更新電腦後所製作，具有start_hybrid_ipv4.bat與start_hybrid_ipv6.bat可以使用電腦C槽SSD中的C:\2021_cadlab_portable\data\Python395與C:\2021_cadlab_portable\data便攜式git_2.31.1，取得較快的執行速度。</span></span></p>
<p style="padding-left: 30px;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">但也同時在portable_hybrid\data目錄中自帶這兩個目錄檔案，因此也可以通過start_ipv4.bat和start_ipv6.bat使用隨身碟中的Python和Git。</span></span></p>
<p style="padding-left: 30px;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">支持程序語言：Python 3.9.5 與 ANSI C（</span></span><a href="https://bellard.org/tcc/"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">Tiny C 編譯器</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">）。</span></span></p>
<p style="padding-left: 30px;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">提供 GitExtensions、Sharex、kdiff3、Zoomit、ProcessExplorer、ProcessMonitor、Wink、Solvespae 等工具。</span></span></p>
<h3>ANSI C</h3>
<p><a href="https://drive.google.com/file/d/1MwUQNWATIgwWoT--HELUHcepNsNi4uTP/view?usp=sharing"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">portable_hybrid.7z</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">下載檔案約 350MB，解開壓縮檔案後約 1GB。</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">portable_hybrid 可攜程序系統中帶有</span></span><a href="https://bellard.org/tcc/"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">Tiny C 編譯器</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">，可以支持類解譯（偽解釋）</span></span><a href="https://en.wikipedia.org/wiki/ANSI_C"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">ANSI C</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">程序。</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">屬於基於 Web 的前端的 Brython 程序，可與服務器</span><span style="vertical-align: inherit;">端</span><span style="vertical-align: inherit;">完整的</span></span><a href="https://en.wikipedia.org/wiki/ANSI_C"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">ANSI C</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">程序結合，需要通過服務器的 CPython 程序出來整合（例如：</span></span><a href="https://github.com/mdecourse/python-tinycc"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">https</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"> : </span><a href="https://github.com/mdecourse/python-tinycc"><span style="vertical-align: inherit;">//github.com/mdecourse/python-tinycc</span></a><span style="vertical-align: inherit;">）</span></span></p>
<h4><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">利用portable_hybrid中的Tiny C編譯器解題：</span></span></h4>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">利用</span></span><a href="https://en.wikipedia.org/wiki/Differential_evolution"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">Differential</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"> Evoluation（漸進進化演），</span></span><a href="https://en.wikipedia.org/wiki/ANSI_C"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">ANSI C</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">程式寫語言</span><span style="vertical-align: inherit;">進化</span><span style="vertical-align: inherit;">演算法的膨脹或最小化演：</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">程序碼位於portable_hybrid\data\tmp\c_ex\volume_ex1.c（即</span></span><a href="https://gist.githubusercontent.com/mdecourse/b5df54ab3d5f2f079f785541d1178a66/raw/46769eea62debaf0cb849698967413806cc13ac2/volume_in_de_ex1.c"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">volume_in_de_ex1.c</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">），以</span></span><a href="https://drive.google.com/file/d/1MwUQNWATIgwWoT--HELUHcepNsNi4uTP/view?usp=sharing"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">portable_hybrid.7z</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">中的</span></span><a href="https://www.scintilla.org/SciTE.html"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">SciTE</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">編輯器開啟後，使用工具-&gt;去註冊讀取。</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">採DE演算法的Python程序範例為portable_hybrid\data\tmp\c_ex\volume_ex1.py（即</span></span><a href="https://gist.githubusercontent.com/mdecourse/b5df54ab3d5f2f079f785541d1178a66/raw/ccdea7b056702bcf06ed24c7407a43e0a1aacdbc/volume_in_de_ex1.py"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">volume_in_de_ex1.py</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">），也可以直接以</span></span><a href="https://drive.google.com/file/d/1MwUQNWATIgwWoT--HELUHcepNsNi4uTP/view?usp=sharing"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">portable_hybrid.7z</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">中的</span></span><a href="https://www.scintilla.org/SciTE.html"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">SciTE</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">編輯器開啟後，使用Tools -&gt; Go 執行操作.</span></span></p>
<p><span style="background-color: #ffff99;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">此一採</span></span><a href="https://www.analyzemath.com/calculus/Problems/maximum_volume_problem.html"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">固定面的紙盒體積收縮截圖</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">volume_ex1.程序碼，若改稱</span></span><a href="https://gist.githubusercontent.com/mdecourse/b5df54ab3d5f2f079f785541d1178a66/raw/ccdea7b056702bcf06ed24c7407a43e0a1aacdbc/volume_in_de_ex1.py" style="background-color: #ffff99;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">volume_in_de_ex1.py</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">後，可以直接利用</span></span><a href="https://mde.tw/cp2021_hw/content/run.html" style="background-color: #ffff99;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">https://mde.tw/cp2021_hw/content/run.html</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">在網介中</span></span><a href="https://mde.tw/cp2021_hw/content/run.html?src=https://gist.githubusercontent.com/mdecourse/b5df54ab3d5f2f079f785541d1178a66/raw/ccdea7b056702bcf06ed24c7407a43e0a1aacdbc/volume_in_de_ex1.py" style="background-color: #ffff99;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">執行</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">.</span></span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">此volume_in_de_ex1.py 的</span></span><a href="https://ndltd.ncl.edu.tw/cgi-bin/gs32/gsweb.cgi/ccd=jL6MqG/record"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">原作者</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">為</span><a href="https://ndltd.ncl.edu.tw/cgi-bin/gs32/gsweb.cgi/ccd=jL6MqG/record"><span style="vertical-align: inherit;">李孟恭</span></a><span style="vertical-align: inherit;">( </span></span><a href="https://github.com/kmollee/algorithm/blob/master/de.py"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">https://github.com/kmollee/algorithm/blob/master/de.py</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"> )</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">一直貫穿物件導向（面向對象）將ANSI-C與CPython結合的教材，可以參考</span></span><a href="https://sites.google.com/site/misoo777/"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">高煥</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">寫的</span></span><a href="https://www.books.com.tw/products/0010813851"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">物件導向ANSI-C與Python的結合紙書</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">（lw-oopc：</span></span><a href="https://sourceforge.net/projects/lwoopc/"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">https</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"> ://sourceforge.net/projects/ </span><a href="https://sourceforge.net/projects/lwoopc/"><span style="vertical-align: inherit;">lwoopc/</span></a><span style="vertical-align: inherit;">即C語言中的輕量級面向對象編程，也就是輕量物件導向C程序語言）。</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">從</span></span><a href="https://github.com/Akagi201/lw_oopc/blob/master/doc/%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1C%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D.md"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">lw-oopc 的簡介</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">以及</span></span><a href="https://github.com/Akagi201/lw_oopc"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">升級版 lw-oopc 原始碼</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">中，則可以進一步對 ANSI-C 在嵌入式（嵌入式）系統上的應用程序有所了解。</span></span></p>
<h3>C-notes</h3>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">可以直接利用</span></span><a href="https://drive.google.com/file/d/1MwUQNWATIgwWoT--HELUHcepNsNi4uTP/view?usp=sharing"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">portable_hybrid.7z</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">執行</span></span><a href="/downloads/Programming for Problem Solving using C.pdf"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">Programming for Problem Solving using</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"> C.pdf中的C程序範例。</span></span></p>
<h4><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">其他參考書：</span></span></h4>
<p style="padding-left: 30px;"><a href="/downloads/PROGRAMMING_FOR_PROBLEM_SOLVING_IN_C.pdf"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">PROGRAMMING_FOR_PROBLEM_SOLVING_IN_C.pdf</span></span></a></p>
<p style="padding-left: 30px;"><a href="/downloads/programming_and_data_structure_in_c.pdf"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">Programming_and_data_structure_in_c.pdf</span></span></a></p>
<p style="padding-left: 30px;"><a href="/downloads/thecbook.pdf"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">thcbook.pdf</span></span></a></p>
<p style="padding-left: 30px;"><a href="/downloads/INTRODUCTION TO NUMERICAL ANALYSIS WITH C PROGRAMS.pdf"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">C 程序數值分析簡介.pdf</span></span></a></p>
<h3>用戶界面</h3>
<h4><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">簡介：</span></span></h4>
<p><a href="https://github.com/KmolYuan/Pyslvs-PyQt5"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">Pyslvs-UI</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">是利用Python 3與PyQt5建立的平台機構模擬與合成系統。</span><span style="vertical-align: inherit;">機構模擬與合成的主要核心包括</span></span><a href="https://github.com/mdecourse/python-solvespace"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">Python的Solvespace</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">幾何約束求解程式庫，</span></span><a href="https://github.com/mdecourse/pyslvs/blob/master/pyslvs/tinycadlib.pyx"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">tinycadlib</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">三角幾何函式程式庫，</span></span><a href="https://github.com/mdecourse/metaheuristics"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">Metaheruistics</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">演算程式庫，</span></span><a href="https://github.com/mdecourse/pyslvs/blob/master/pyslvs/bfgs.pyx"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">bgfs</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">幾何約束求解程式庫，</span></span><a href="https://github.com/mdecourse/pyslvs/blob/master/pyslvs/topo_config.pyx"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">拓撲</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">類型合成程式庫，</span></span><a href="https://github.com/mdecourse/pyslvs/blob/80be5830a1a3ccfe3b9540f0eaad408267d26373/pyslvs/number.pyx"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">編號</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">數目合成程式庫等。</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">其中，  </span></span><a href="https://github.com/mdecourse/metaheuristics"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">Metaheruistics</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">演算程序庫包含實編碼遺傳算法（</span></span><a href="https://github.com/mdecourse/metaheuristics/blob/master/rga.pyx"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">RGA</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">）、差分進化（</span></span><a href="https://github.com/mdecourse/metaheuristics/blob/master/de.pyx"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">DE</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">）與螢火蟲算法（</span></span><a href="https://github.com/mdecourse/metaheuristics/blob/master/firefly.pyx"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">Firefly</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">）等三種，平面用於尺寸機構合成演算。</span></span></p>
<h4><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">開發歷程：</span></span></h4>
<p><a href="https://github.com/KmolYuan/Pyslvs-PyQt5"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">Pyslvs-UI</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">的開髮用208年，最基礎的實數基因算法在平面機構的基礎上，歷經從背景的應用演說，從歷經演變的演化的貢獻：</span></span></p>
<ol>
<li><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">李孟恭, 2015, </span></span><a href="https://hdl.handle.net/11296/tur9hu"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">Django 網際框架在四平台框架合成系統上的應用</span></span></a></li>
<li><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">李玠廷, 2010</span></span><a href="https://hdl.handle.net/11296/mtf789"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">網際程序框架在平台的3平台機構尺寸合成系統上應用</span></span></a></li>
<li><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">陳威任, 2013, 符號式平面機構應用研究</span></span></li>
<li><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">謝政良, 2012,</span></span><a href="https://hdl.handle.net/11296/h5z5sb"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">網際雙自由度機構尺寸合成系統</span></span></a></li>
<li><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">黃迎鉉，2012，</span></span><a href="https://hdl.handle.net/11296/a5b4p7"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">網符號輔助軸接連桿機構之基因演算尺寸合成系統</span></span></a></li>
<li><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">謝智翔, 2012,</span></span><a href="https://hdl.handle.net/11296/v9mr92"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">網際史都華平台機構逆運動學分析與模擬</span></span></a></li>
<li><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">許哲菘, 2010,</span></span><a href="https://hdl.handle.net/11296/w66tpa"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">網際六軸機械臂系統的逆運動學分析與模擬</span></span></a></li>
<li><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">葉岱錦, 2009,</span></span><a href="https://hdl.handle.net/11296/tt6672"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">基因演算法在網際機構合成系統上的</span></span></a></li>
</ol>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">過程中，於2011年由</span></span><a href="https://github.com/kmollee"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">李孟恭</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">整合上述論文所開發的算法，完成</span></span><a href="http://cython.org/"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">Cython</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">格式的</span></span><a href="https://github.com/kmollee/algorithm/blob/master/rga.pyx"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">RGA</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">、</span></span><a href="https://github.com/kmollee/algorithm/blob/master/de.pyx"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">DE</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">與</span></span><a href="https://github.com/kmollee/algorithm/blob/master/firefly.pyx"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">Firefly</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">算法演算法庫後。</span><span style="vertical-align: inherit;">並自2016年起由</span></span><a href="https://github.com/KmolYuan"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">張元</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">將上述這些合成演算法，採用</span></span><a href="http://www.swig.org/"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">SWIG</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">技術，將單獨用於Python 2的</span></span><a href="https://github.com/BBBSnowball/python-solvespace"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">Python-Solvespace，</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">改寫為能結合PyQt5圖形介面使用的</span></span><a href="https://github.com/mdecourse/python-solvespace"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">Python-Solvespace</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">程序庫愚開端。</span><span style="vertical-align: inherit;">再用平面機構中的組合與類型合成等程序庫後，</span></span><a href="https://github.com/KmolYuan/Pyslvs-PyQt5"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">現有</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">的 </span><a href="https://github.com/KmolYuan/Pyslvs-PyQt5"><span style="vertical-align: inherit;">Pyslvs-UI</span></a><span style="vertical-align: inherit;">平面機構模擬與合成套件。</span></span></p>
<h4><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">Pyslvs-UI 開發紀要</span></span></h4>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">2015年4月——由</span></span><a href="https://github.com/kmollee"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">李孟恭</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">以</span></span><a href="http://cython.org/"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">Cython</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">技術，完成三個</span></span><a href="https://github.com/kmollee/algorithm"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">尺寸合成演算法</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">程序庫。</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">2016年7月——由</span></span><a href="https://github.com/KmolYuan"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">張元</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">完成Python 3格式的</span></span><a href="https://github.com/KmolYuan/python-solvespace"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">Python-Solvespace</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">程序庫。</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">2016年12月-由</span></span><a href="https://github.com/KmolYuan"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">張元</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">結合PyQt5與演算程序庫，完成第一代</span></span><a href="https://github.com/KmolYuan/Pyslvs-PyQt5"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">Pyslvs-UI</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">套件。</span></span></p>
<p><span style="vertical-align: inherit;"></span><a href="https://github.com/KmolYuan/pyslvs-paper-public/releases"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">2011</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">年7月9日 - 由張元完成平台</span><a href="https://github.com/KmolYuan/pyslvs-paper-public/releases"><span style="vertical-align: inherit;">多機構之合成與應用</span></a><span style="vertical-align: inherit;">碩士論文。</span></span></p>
<p></p>
<h2>Git擴展</h2>
<p><a href="https://github.com/mdecourse/cad2021/files/7517136/GitExtensions_hybrid.zip"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">下載個人化設置的 GitExtensions</span></span></a></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">使用 GitExtensions 輸入提交消息時，若出現字串突出顯示提交字串可能不會被 Github 接受，導致</span></span><a href="https://github.com/mdecourse/cad2021_hw/commit/fafa93e9925892354f02996006a965bbd2b4a56e"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">Github Pages 無法轉檔錯誤</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">，網頁將正常連線。</span><span style="vertical-align: inherit;">修改錯誤後，以正確的提交字串推送，可以得到正確的</span></span><a href="https://github.com/mdecourse/cad2021_hw/commit/09d98e1dfc4a0cfda2edae530efb5e08ac1f47ba"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">轉檔結果</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">。</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">GitExtensions 設置：</span></span></p>
<p><img alt="" height="486" src="https://mde.tw/cad2021_hw/images/GitExtensions_Paths_setup.png" width="600"/></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">GitExtensions Git 配置設置：</span></span></p>
<p><img alt="" height="486" src="https://mde.tw/cad2021_hw/images/GitExtensions_Git_config.png" width="600"/></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">下面將請已經完成GitExtensions與SSH結合使用的學員製作“GitExtensions導引”Wink，詳細說明了設置流程。</span></span></p>
<h2>跑</h2>
<p>這個頁面利用 <a href="https://brython.info/">Brython</a> 程式庫, 讓使用者可以直接在瀏覽器中執行 Python 語法程式 (與 CPython <a href="https://brython.info/static_doc/en/stdlib.html">語法比較</a>). Brython 程式庫以 Javascript 編寫, 能在頁面<a href="https://brython.info/static_doc/en/html.html">置入 html,</a> 並<a href="https://brython.info/static_doc/en/jsobjects.html">結合</a>第三方 Javascript 程式庫, 進行 <a href="https://brython.info/gallery/bricks_py.html">2D</a> 與 <a href="https://brython.info/gallery/three.html">3D</a> 繪圖應用. (範例: <a href="https://imvickykumar999.github.io/Chrome-Extension/Brython%20Snake/snake.html">https://imvickykumar999.github.io/Chrome-Extension/Brython%20Snake/snake.html</a> )</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- 印出版次與關鍵字程式 --></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd(ev):
    bd = doc["brython_div"]
    bd.clear()
# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/e896a4705a95ac8cc4147b355b0e87ef/raw/8954b8280c524c5781dc3c0b3565bc489d3aa3a3/cango_gear1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace.editor.setValue(prog)
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
doc['clear_bd'].bind('click', clear_bd)
# 呼叫函式執行
run()
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<!-- 存擋表單開始 --><form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form><!-- 存擋表單結束 -->
<p></p>
<!-- 執行與清除按鈕開始 -->
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除輸出區</button><button id="clear_bd">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<!-- 執行與清除按鈕結束 -->
<p></p>
<!-- 程式執行 ouput 區 -->
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 -->
<div id="brython_div"></div>
<!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<p>
<script src="https://mde.tw/cp2021/cmsimde/static/Cango-24v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/gearUtils-09.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/SVGpathUtils-6v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/sylvester.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/PrairieDraw.js"></script>
</p>
<h2>runsrc</h2>
<h4>run 頁面在動態網頁的 html:</h4>
<p><a href="/downloads/run.txt">run.txt</a></p>
<p></p>
<h2>Snake</h2>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><canvas height="400" id="game-board" width="400"></canvas></p>
<h4 class="text-center" id="score">Score: 0</h4>
<p></p>
<h6 class="text-center" id="high-score">High Score: 0</h6>
<p></p>
<div class="text-center"><button class="btn btn-info" id="instructions-btn">Instructions</button></div>
<p>
<script type="text/python">
from browser import document, html, window
import random

score = 0
high_score = 0

px = py = 10
gs = tc = 20
ax = ay = 15
xv = yv = 0
trail = []
tail = 5

pre_pause = [0,0]
paused = False

def game():
    global px, py, tc, gs, ax, ay, trail, tail, score
    px += xv
    py += yv
    if px < 0:
        px = tc-1
    if px > tc-1:
        px = 0
    if py < 0:
        py = tc-1
    if py > tc-1:
        py = 0
    ctx.fillStyle = "black"
    ctx.fillRect(0, 0, canvas.width, canvas.height)
    ctx.fillStyle = "lime"
    for i in range(len(trail)):
        ctx.fillRect(trail[i][0]*gs, trail[i][1]*gs, gs-2, gs-2)
        if trail[i][0] == px and trail[i][1] == py:
            score = score if paused else 0
            tail = tail if paused else 5
    trail.insert(0, [px, py])
    while len(trail) > tail:
        trail.pop()

    if ax == px and ay == py:
        tail += 1
        ax = int(random.random()*tc)
        ay = int(random.random()*tc)
        score += 1
    update_score(score)
    ctx.fillStyle = "red"
    ctx.fillRect(ax*gs, ay*gs, gs-2, gs-2)

def update_score(new_score):
    global high_score
    document["score"].innerHTML = "Score: " + str(new_score)
    if new_score > high_score:
        document["high-score"].innerHTML = "High Score: " + str(new_score)
        high_score = new_score

def key_push(evt):
    global xv, yv, pre_pause, paused
    key = evt.keyCode
    if key == 37 and not paused:
        xv = -1
        yv = 0
    elif key == 38 and not paused:
        xv = 0
        yv = -1
    elif key == 39 and not paused:
        xv = 1
        yv = 0
    elif key == 40 and not paused:
        xv = 0
        yv = 1
    elif key == 32:
        temp = [xv, yv]
        xv = pre_pause[0]
        yv = pre_pause[1]
        pre_pause = [*temp]
        paused = not paused

def show_instructions(evt):
    window.alert("Use the arrow keys to move and press spacebar to pause the game.")

canvas = document["game-board"]
ctx = canvas.getContext("2d")
document.addEventListener("keydown", key_push)
game_loop = window.setInterval(game, 1000/15)
instructions_btn = document["instructions-btn"]
instructions_btn.addEventListener("click", show_instructions)
</script>
</p>
<h2>SSH</h2>
<p>SSH 指 Secure Shell: <a href="https://en.wikipedia.org/wiki/Secure_Shell">https://en.wikipedia.org/wiki/Secure_Shell</a></p>
<p>而 Shell 則指: <a href="https://en.wikipedia.org/wiki/Shell_(computing)">https://en.wikipedia.org/wiki/Shell_(computing)</a>, 若在 Ｗindows 操作系統, 可以將 Shell 解釋為提供使用者在命令列視窗 (Dos command Windows) 執行指令的解譯程式. 也就是說 Shell 其實是一組程式, 讓使用者可以透過指令操控電腦.</p>
<p>所以 SSH 就是能夠透過加密網路傳輸協議, 讓使用者安全地透過網路與電腦進行溝通的 Shell.</p>
<p>在 Mac 與 Linux 操作系統中, 可以利用 Terminal 或 X-Terminal, 以 ssh 執行 client 端程式, 透過遠端登入的方式執行 Shell commands. 在 Windows 操作系統則可以利用 Putty 作為 ssh 的 client 端, 透過網路以加密傳輸遠端登入至其他執行 sshd (即 Shell server) 的電腦.</p>
<h2>Network</h2>
<p>當電腦輔助設計室中, 將連外網路由 NAT 轉為直接連到 Backbone 後, 可能因為電腦中所安裝的套件問題, 會因直接網路連外, 導致外部電腦試圖透過 ARP 快取進行破壞攻擊, 因此必須設法中止此一攻擊, 並且能利用 IPv6 網路協定上網.</p>
<p><img alt="" height="275" src="/images/cadlab_network_problem.png" width="400"/></p>
<p>面對此一網路威脅的處理方法, 就是在純 IPv6 網路協定下, 讓電腦中所安裝的潛在問題套件無法透過系統的 Proxy 設定連網:</p>
<ol>
<li>關閉 Windows 操作系統的網路代理主機設定</li>
<li>關閉 IPv4 網路協定</li>
<li>設定 IPv6 的 DNS 伺服器, 2001:b000:168::1</li>
<li>針對瀏覽器與 git 客戶端, 分別設定能從純 IPv6 轉往只支援 IPv4 網路協定的代理主機.</li>
</ol>
<p>git 的網路代理主機設定 git config --global http.proxy <a href="http://[Proxy_ip_address]:3128">http://[Proxy_ip_address]:3128</a></p>
<h4>Computer Networks:</h4>
<p style="padding-left: 30px;">相關開放電子書: <a href="http://intronetworks.cs.luc.edu/current1/html/">http://intronetworks.cs.luc.edu/current1/html/</a></p>
<p style="padding-left: 60px;">其他格式: <a href="https://open.umn.edu/opentextbooks/textbooks/an-introduction-to-computer-networks">https://open.umn.edu/opentextbooks/textbooks/an-introduction-to-computer-networks</a></p>
<h3>Fossil Server</h3>
<p>從 W7 分組後, 各組在電腦輔助設計室中將會有一台 Windows 10 電腦的第三磁區並未保護, 因此可以用來建立 Fossil SCM Server, 此 Server 的功能可以用來與 Github 結合使用, 分別用來管理各組所共同開發的 Brython 程式, 並且提供 Forum, Chat 與 Documentation (用來伺服課程的靜態網頁) 功能.</p>
<p>在 Windows 操作系統建立 Fossil SCM 所需要的工具:</p>
<ol>
<li>Fossil SCM - Fossil SCM server 主體.</li>
<li>Stunnel - https 代理主機.</li>
<li>Nginx - WWW 伺服器, 主要將 http 連線跳轉至 https.</li>
<li>NSSM - 將 Fossil server, Stunnel, Nginx 執行程式設為 service.</li>
</ol>
<p>步驟 1: 從 <a href="https://fossil-scm.org/home/uv/download.html">https://fossil-scm.org/home/uv/download.html</a> 下載 fossil.exe, 存入可攜系統 y:\</p>
<p>步驟 2: 從 <a href="https://www.stunnel.org/downloads.html">https://www.stunnel.org/downloads.html</a> 下載 stunnel 套件, 存入可攜系統 y:\</p>
<p>步驟 3: 從 <a href="https://nginx.org/en/download.html">https://nginx.org/en/download.html</a> 下載 nginx 套件, 存入可攜系統 y:\</p>
<p>步驟 4: 從 <a href="https://nssm.cc/download">https://nssm.cc/download</a> 下載 nssm.exe, 存入可攜系統 y:\</p>
<p>建立 c:\pj2022\repo 目錄, 啟動可攜系統後, 進入 repo 目錄後, 以 fossil init pj2022.fossil 建立 pj2022.fossil 倉儲檔案.</p>
<p>接著以 fossil user password Account Password -R pj2022.fossil 指令, 針對帳號為 Account 的 pj2022.fossil 管理者, 更改倉儲管理密碼為 Password.</p>
<p>若要將 Fossil Server 在 port 9000 啟動, 執行 fossil server c:\pj2022\repo\pj2022.fossil --port 9000 後, 就可以利用瀏覽器開啟 <a href="http://localhost:9000">http://localhost:9000</a> 中的 pj2022.fossil 網際伺服器.</p>
<p>接著設定 Stunnel 的 stunnel.conf 為:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">; TLS front-end to a web server<span></span>
[https]<span></span>
accept  = Server_domain_name:443<span></span>
connect = 9000<span></span>
cert = localhost.crt<span></span>
key = localhost.key<span></span>
TIMEOUTclose = 0</pre>
<p>以 y:\stunnel.exe 執行後, 必須將前面採 http 協定傳送 port 9000 資料的 Fossil SCM server 指令改為:</p>
<p>fossil server c:\pj2022\repo\pj2022.fossil --port 9000 --https</p>
<p>表示要送出 https 格式封包讓 Stunnel 對外連線.</p>
<p>待 Fossil SCM server 與 Stunnel 都正常運作後, 就可以透過瀏覽器以 <a href="https://Server_domain_name">https://Server_domain_name</a> 連接至 pj2022.fossil 的網際倉儲伺服器.</p>
<p>總結上述有關設定 Fossil SCM server 以及 Stunnel https 代理, 所需要執行的 fossil.exe 與 stunnel.exe 都必須能通過 Windows 10 的防火牆.</p>
<h4>nssm 服務設定:</h4>
<p style="padding-left: 30px;">nssm install fossil_server</p>
<p style="padding-left: 60px;">Application Path: C:\pj2022\fossil.exe</p>
<p style="padding-left: 60px;">Startup directory: C:\pj2022</p>
<p style="padding-left: 60px;">Arguments: server C:\pj2022\repo\pj2022.fossil --port 9000 --https</p>
<p style="padding-left: 30px;">nssm install stunnel</p>
<p style="padding-left: 60px;">Application Path: C:\pj2022\stunnel\bin\stunnel.exe</p>
<p style="padding-left: 60px;">Startup directory: C:\pj2022</p>
<p style="padding-left: 60px;">Arguments: 留空白, stunnel.exe 會自動以 config\stunnel.conf 作為設定參數.</p>
<h4>制式 https:</h4>
<p style="padding-left: 30px;">透過 <a href="https://letsencrypt.org/">https://letsencrypt.org/</a> 申請正式的網站符號名稱數位簽章.</p>
<p style="padding-left: 30px;"><a href="https://certbot.eff.org/instructions?ws=nginx&amp;os=windows">https://certbot.eff.org/instructions?ws=nginx&amp;os=windows</a></p>
<p style="padding-left: 30px;">關掉系統 proxy 設定</p>
<p style="padding-left: 30px;">安裝 certbot</p>
<p style="padding-left: 30px;">以管理者開啟 cmd, 執行 certbot certonly --webroot</p>
<p style="padding-left: 30px;"></p>
<p></p>
<h1>HW1</h1>
<p>HW1 - 網際動畫與 touch typing 佔學期成績 20%.</p>
<p>何謂 <a href="https://zh.wikipedia.org/zh-tw/Secure_Shell">Secure Shell</a>?</p>
<p>HTTPS: <a href="https://en.wikipedia.org/wiki/HTTPS">https://en.wikipedia.org/wiki/HTTPS</a></p>
<p>Transport Layer Security: <a href="https://en.wikipedia.org/wiki/Transport_Layer_Security">https://en.wikipedia.org/wiki/Transport_Layer_Security</a></p>
<p>SSH: <a href="https://en.wikipedia.org/wiki/Secure_Shell">https://en.wikipedia.org/wiki/Secure_Shell</a></p>
<h4>如何利用 SSH 協定將倉儲改版內容推送到 Github:</h4>
<p style="padding-left: 30px;"><a href="https://mde.tw/cd2021/content/SSH%20%E4%BA%86%E6%B2%92.html">SSH 了沒</a></p>
<h4>以下為 Github 所提供有關 Token 與 SSH 的說明資料:</h4>
<p style="padding-left: 30px;">Github Personal Token: <a href="https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/">https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/</a></p>
<p style="padding-left: 30px;">Github SSH: <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh">https://docs.github.com/en/authentication/connecting-to-github-with-ssh</a></p>
<p style="padding-left: 60px;">Using the SSH protocol, you can connect and authenticate to remote servers and services. With SSH keys, you can connect to GitHub without supplying your username and personal access token at each visit.</p>
<p><a href="https://gnupg.org/">GnuPG</a> (GNU Privacy Guard):</p>
<p style="padding-left: 30px;">如何利用 <a href="https://www.gpg4win.org/">https://www.gpg4win.org/</a> 保全數位檔案傳送.</p>
<p style="padding-left: 30px;"><a href="https://gnupg.org/gph/en/manual.pdf">https://gnupg.org/gph/en/manual.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://gnupg.org/documentation/manuals/gnupg.pdf">https://gnupg.org/documentation/manuals/gnupg.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://www.gpg4win.org/doc/en/gpg4win-compendium.html">https://www.gpg4win.org/doc/en/gpg4win-compendium.html</a></p>
<p style="padding-left: 30px;">由於數位檔案很容易被改造, 因此在製作數位檔案內容時, 在 Windows 平台上可以利用 Gpg4win 加密或保全.</p>
<p style="padding-left: 30px;">GnuPG 加密</p>
<p style="padding-left: 30px;">GnuPG 保全 - 在網站提供檔案下載前, 利用 Gpg4win 對檔案進行數位簽章</p>
<p>在執行作業之前, 必須要仔細閱讀作業要求內容, 想像一下作業指定者為何要提出此一作業, 其目的為何, 然後再根據要求逐一安排時間完成.</p>
<p>作業一的主題為網際動畫與 touch typing, 並要求學員要至 Github 申請帳號, 並將作業內容直接在課程網頁中執行 Brython (Browser Python), 完成後將程式碼放到各學員 Github 帳號下的 Gist 區域, 然後再將作業連結提交至課程網頁倉儲的 Discussion 區.</p>
<p>另外, 除了要修改 Task1 頁面中動畫的程式外, 還要求使用者從 Cango 頁面, 將程式中的網際按鈕放到頁面, 以便控制程式的執行或中斷.</p>
<p>假如直翻 Browser Python 就是瀏覽器上的 Python, 除了能夠在瀏覽器上執行的 Python, 還有沒有其他環境上能夠執行的 Python？</p>
<p>例如: 1994 年剛被開發出來的 Python 是用 C 寫的, 所以稱為 CPython, 可以在各種操作系統平台上執行, 而且累積二十幾年的發展, 已經擁有許多的程式庫, 讓 CPython 可以解決許多工程問題.</p>
<p>除了 CPython 與 Brython (以 Javascript 編寫) 之外, 還有以 Java 編寫的 <a href="https://www.jython.org/">Jython</a>, 以 .NET 技術編寫的 <a href="https://ironpython.net/">ironPython</a>, 還有以 Rust 編寫的 <a href="https://rustpython.github.io/">RustPython</a> 或是以 Python 編寫的 <a href="https://www.pypy.org/">PyPy</a>, 每一種 Python 都有其特色, 在適合的環境中可用來解決各種不同的問題.</p>
<hr/>
<p>當我們看到 <a href="https://mde.tw/cp2021/content/Task1.html">https://mde.tw/cp2021/content/Task1.html</a> 這個頁面中的程式執行時, 應該會好奇, 為何能夠直接在瀏覽器的網頁上, 直接點擊 Run, Python 程式就能執行, 在頁面中畫靜態與動態的圖型.</p>
<p>這種在網頁上畫圖的依據是採用 HTML5 規格中的 <a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API">Canvas API</a>. 原本是設計給 Javascript 在網頁上繪圖, 透過 Canvas API 程式語法, 就可以透過 Brython 在頁面中繪圖.</p>
<div><hr/></div>
<div>HW1 - 網際動畫與 touch typing 佔學期成績 20%.</div>
<p><a href="https://github.com/mdecourse/cp2021/discussions/8">HW1 具體項目成果回報區</a></p>
<ol>
<li>請至 <a href="https://github.com">https://github.com</a> 申請 Github 帳號後, 至 <a href="https://mde.tw/cp2021/content/Task1.html">https://mde.tw/cp2021/content/Task1.html</a>  頁面, 將左右碰撞移動的紅色方塊, 改為先移動到水平畫面中心點位置後, 接著上下碰撞移動.</li>
<li>請將 1. 的程式碼存入個人 Gist 區 (<a href="https://docs.github.com/en/github/writing-on-github/editing-and-sharing-content-with-gists/creating-gists">說明</a>).</li>
<li>請在 1. 的程式中, 加入與 <a href="https://mde.tw/cp2021/content/Cango.html">Cango 頁面</a> Fourbar 程式碼相同功能的啟動按鈕, 讓使用者可以利用按鈕啟動或中斷紅色方塊上下碰撞移動. 完成後請將程式碼存入個人 Gist 區.</li>
<li>請在 Gist 檔案編輯區, 利用鍵盤輸入 <a href="https://docs.github.com/en/github/writing-on-github/editing-and-sharing-content-with-gists/creating-gists#about-gists">https://docs.github.com/en/github/writing-on-github/editing-and-sharing-content-with-gists/creating-gists#about-gists</a> 中的這段英文內容, 請利用手機計時, 大概需要多少時間? 請將此段練習打字的內容與所需時間存入 Gist 檔案中.</li>
<li>請至少練習 key in 這段英文內容三次, 然後看看是否已經了解如何透過電腦鍵盤 touch typing?</li>
<li>接下來請利用中文輸入 <a href="https://ithelp.ithome.com.tw/articles/10206233">https://ithelp.ithome.com.tw/articles/10206233</a> 的第一段中文說明, 請利用手機計時, 大概需要多少時間?</li>
</ol>
<hr/>
<p><a href="https://mde.tw/cp2021_hw/content/run.html?src=https://gist.githubusercontent.com/mdecourse/3db55f124185def5aac8e5d51579c484/raw/cc346e5ed77c63051ea69c985b191d8bd3afc1fc/red_rect1.py">HW1-1</a>: 將左右碰撞移動的紅色方塊, 改為先移動到水平畫面中心點位置後, 接著上下碰撞移動.</p>
<p><a href="https://mde.tw/cp2021_hw/content/run.html?src=https://gist.githubusercontent.com/mdecourse/3db55f124185def5aac8e5d51579c484/raw/cc346e5ed77c63051ea69c985b191d8bd3afc1fc/red_rect2_with_start_button.py">HW1-2</a>: 加入與 <a href="https://mde.tw/cp2021/content/Cango.html">Cango 頁面</a> Fourbar 程式碼相同功能的啟動按鈕, 讓使用者可以利用按鈕啟動或中斷紅色方塊上下碰撞移動. 完成後請將程式碼存入個人 Gist 區.</p>
<h4>程式碼說明:</h4>
<p>HW1-1.py</p>
<p><a href="https://brython.info/static_doc/en/browser.html">Brython browser 模組</a></p>
<p><a href="https://brython.info/static_doc/en/html.html">Brython browser html 模組</a></p>
<p><a href="https://brython.info/static_doc/en/cookbook/bind_unbind.html">Brython enable/disable event</a></p>
<p>Python 函式定義與呼叫</p>
<p>Python 縮排 (indentation)</p>
<p>字串 (string)</p>
<p>數列 (list)</p>
<p>if 判斷式</p>
<p>在 Python 關鍵字中, None, True 與 False 第一個字母都必須是大寫</p>
<p><a href="https://www.google.com/search?q=site%3Apython.org+global">在 python.org 網站範圍搜尋 global 關鍵字</a></p>
<p>有關 Python 的 global: <a href="https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python">https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 從 browser 導入 html<span></span>
from browser import html<span></span>
# 從 browser 導入 document 並且對應為 doc<span></span>
from browser import document as doc<span></span>
# 導入 browser.timer<span></span>
import browser.timer<span></span>
<span></span>
# 定義一個 game() 函式<span></span>
def game():<span></span>
    """<span></span>
利用 global 關鍵字 將 px, py 與 speed <span></span>
設為可在函式內改變對應內容 <span></span>
(意即, 這三個定義在函式外的全域變數,  <span></span>
在函式中分別位於等號左邊)<span></span>
    """<span></span>
    global px, py, speed<span></span>
    ctx.clearRect(px, py, width, height)<span></span>
    ctx.fillStyle = "red"<span></span>
    if px &lt; canvas.width/2:<span></span>
        px += speed<span></span>
    else:<span></span>
        py -= speed<span></span>
    <span></span>
    if px &lt; 0 or (px + width) &gt; canvas.width:<span></span>
        speed = -speed<span></span>
    if py &lt; 0 or (py + height) &gt; canvas.height:<span></span>
        speed = -speed<span></span>
    <span></span>
    ctx.fillRect(px, py, width, height)<span></span>
<span></span>
"""<span></span>
a variable declared outside of the function or <span></span>
in global scope is known as a global variable. <span></span>
This means that a global variable can be accessed <span></span>
inside or outside of the function.<span></span>
"""<span></span>
<span></span>
canvas = html.CANVAS(width = 600, height = 600)<span></span>
canvas.id = "game-board"<span></span>
brython_div = doc["brython_div"]<span></span>
brython_div &lt;= canvas<span></span>
ctx = canvas.getContext("2d")<span></span>
px = 0<span></span>
py = 50<span></span>
width = 20<span></span>
height = 20<span></span>
speed = 2<span></span>
<span></span>
browser.timer.set_interval(game, 10)</pre>
<p>HW1-2.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document as doc<span></span>
from browser import timer<span></span>
from browser import html<span></span>
import math<span></span>
<span></span>
# 建立 game-board canvas<span></span>
<span></span>
canvas = html.CANVAS(width = 300, height = 300)<span></span>
canvas.id = "game-board"<span></span>
brython_div = doc["brython_div"]<span></span>
brython_div &lt;= canvas<span></span>
ctx = canvas.getContext("2d")<span></span>
px = 0<span></span>
py = 50<span></span>
width = 20<span></span>
height = 20<span></span>
speed = 2<span></span>
<span></span>
# 建立 button<span></span>
brython_div &lt;= html.BUTTON("啟動", id="power")<span></span>
 <span></span>
def game():<span></span>
    global px, py, speed<span></span>
    ctx.clearRect(px, py, width, height)<span></span>
    ctx.fillStyle = "red"<span></span>
    if px &lt; canvas.width/2:<span></span>
        px += speed<span></span>
    else:<span></span>
        py -= speed<span></span>
    <span></span>
    if px &lt; 0 or (px + width) &gt; canvas.width:<span></span>
        speed = -speed<span></span>
    if py &lt; 0 or (py + height) &gt; canvas.height:<span></span>
        speed = -speed<span></span>
    <span></span>
    ctx.fillRect(px, py, width, height)<span></span>
 <span></span>
 <span></span>
# 將 anim 設為 None<span></span>
anim = None<span></span>
 <span></span>
def launchAnimation(ev):<span></span>
    global anim<span></span>
    # 初始啟動, anim 為 None<span></span>
    if anim is None:<span></span>
        # 每 0.1 秒執行一次 draw 函式繪圖<span></span>
        anim = timer.set_interval(game, 10)<span></span>
        # 初始啟動後, 按鈕文字轉為"暫停"<span></span>
        doc['power'].text = '暫停'<span></span>
    elif anim == 'hold':<span></span>
        # 當 anim 為 'hold' 表示曾經暫停後的啟動, 因此持續以 set_interval() 持續旋轉, 且將 power 文字轉為"暫停"<span></span>
        anim = timer.set_interval(game, 10)<span></span>
        doc['power'].text = '暫停'<span></span>
    else:<span></span>
        # 初始啟動後, 使用者再按 power, 此時 anim 非 None 也不是 'hold', 因此會執行 clear_interval() 暫停<span></span>
        # 且將 anim 變數設為 'hold', 且 power 文字轉為"繼續"<span></span>
        timer.clear_interval(anim)<span></span>
        anim = 'hold'<span></span>
        doc['power'].text = '繼續'<span></span>
<span></span>
 <span></span>
doc["power"].bind("click", launchAnimation)<span></span>
</pre>
<p></p>
<h2>Token</h2>
<p>當你建立 Github 帳號後就可以利用 Gist 儲存資料或程式碼, 且可以利用 <a href="https://mde.tw/cp2021/content/run.html">https://mde.tw/cp2021/content/run.html</a> 來執行 Brython 程式.</p>
<p>在 run.html 執行 Brython 程式, 可以使用下列三種方法:</p>
<ol>
<li>直接連線至 <a href="https://mde.tw/cp2021/content/run.html">https://mde.tw/cp2021/content/run.html</a> 將 Brython 程式寫在編輯區, 然後按下 Run.</li>
<li>將 Brython 程式存在 Gist, 利用 run.html?src=Gist_URL, run.html 中的 Javascript 就會導入此 Gist 程式執行.</li>
<li>將 Brython 程式寫在 run.html 頁面中, 然後安排其中的 Javascript 或 Brython 程式導入執行.</li>
</ol>
<p>而上述三種程式的執行若更動 run.html 或取 run.html?src=Gist_URL 連結放入頁面, 都必須要在各自的 cp2021_hw倉儲的動態網站中改版, 轉為靜態網頁內容, 然後新增提交並推送至 Github, 建立個人 Github 帳號對應的Personal Token, 就可以放入近端倉儲 .git/config 中的 origin url 帳號密碼區, 然後將改版資料推送到 Github.</p>
<p>利用 Personal Token 字串 push 改版資料的步驟:</p>
<ol>
<li>至 Github 帳號 settings 下的開發者區域建立能夠更動 repo 的權限, 並且決定此 Token 權限的使用期限.</li>
<li>將此 Token 字串放入對應倉儲 .git/config 檔案中的 origin url=https://Token_String@github.com/帳號/cp2021_hw.git</li>
</ol>
<h2>SSH push</h2>
<p>Github 帳號用戶除了可以利用 Personal Token push 改版資料外, 也可以利用 SSH keys 將改版資料 push 到 Github. 詳細說明可以參考 <a href="https://mde.tw/cd2021/content/SSH%20%E4%BA%86%E6%B2%92.html">SSH 了沒</a>.</p>
<p>以下說明 SSH push 操作步驟:</p>
<ol>
<li>下載 putty 安裝套件, 安裝後, 將 putty 目錄取出放入隨身碟 y:\ 目錄中 (也就是 data 目錄中).</li>
<li>修改 start_ipv4.bat 或 start_ipv6.bat, 設定 GIT_SSH 變數, 指向 putty 套件目錄中的 plink.exe, 表示隨後的 git push 將透過 putty 中的 session 設定連網. 亦即在 start_ipv4.bat 或 start_ipv6.bat 檔案中加入 <span style="background-color: #ccffcc;">set GIT_SSH=%Disk%:\putty\plink.exe</span></li>
<li>利用 putty 中的 puttygen.exe 建立 keys, 按下 generate 後, 在 puttygen 執行視窗上方以滑鼠隨意移動, 以便利用滑位置隨機建立 keys, 完成後在原先滑鼠移動位置所出現的 key, 即為 OpenSSH 格式的 public key 內容, 而此一內容就是要放到 Github 帳號 settings 中的 SSH and GPG keys 中的 new SSH key 欄位區 (此為用戶所設定的 public key).</li>
<li>接下來要利用 puttygen 建立 keys 視窗右下的 save private key, 將此一 .ppk private key 存到 home_ipv4 或</li>
<li> home_ipv6 目錄下.</li>
<li>接下來要啟動 putty.exe 建立一個能夠連線至 github.com 網站的 session, 此 session 可以取名為 github.com, 也可以取其它名稱, 只是這個 session 名稱, 將會成為 git 指令與 plink.exe 連結使用後的連線 session 名稱. 而在設定此連線到 github.com 的 session, 在無需設定 proxy 的情況下, 只需要指定 SSH - AUTH 中的 private key 存放位置.</li>
<li>最後則是配合採用 SSH 協定連線, 必須要修改倉儲中 .git/config url 的連線協定, 從原先的 <a href="https://github.com/帳號/cp2021_hw.git">https://github.com/帳號/cp2021_hw.git</a> 改為 <a href="mailto:git@github.com:帳號/cp2021_hw.git">git@github.com:帳號/cp2021_hw.git</a> 也就是採用 git 作為連線到 putty session 名稱 github.com, 然後採用 github 帳號檢查是否此 private key 與前述放入 Github SSH and GPG keys 的 public 成對, 若匹配成功, 則使用者利用上述的 SSH 就可以執行將改版內容 push 到 Github.</li>
</ol>
<p>上述採 SSH 流程 push 改版資料的基本概念為:</p>
<ol>
<li>啟動隨身系統時就告知 GIT_SSH 變數, 要利用 putty 工具作為 SSH 連線的 client 端.</li>
<li>接著要建立 OpenSSH 格式的 public key, 在 Github 帳號下完成登記.</li>
<li>至於近端則要儲存與送到 Github public 對應的 putty 格式 private key, 因為設定 putty session 時會用到此 private key.</li>
<li>接著就是利用這把近端的 private key, 建立一個能夠採 SSH 協定連線到 Github 的 putty session, 此 session 其實只有三個基本屬性: 連線主機符號名稱, 也就是 github.com, 連線 session 名稱, 以及與 session 對應的 private key 位置.</li>
<li>最後就是修改要採 SSH push 的倉儲中 .git/config url 連線協定, 從 https 改為 SSH, 並以 git 作為登入帳號, 且宣告所要使用的 putty session 名稱與登入後要驗證 key 權限的 session 名稱.</li>
</ol>
<p></p>
<h1>HW2</h1>
<p>在電腦輔助設計的新電腦上可以利用 USB 隨身碟設定所謂 Hybrid 可攜程式系統, 也就是 Python 與 Portablegit 使用 c:\2021_portable_kmol\data 目錄中的檔案, 而將 start_ipv4.bat, start_ipv6.bat, data, wscite, tmp 等目錄放在 USB 隨身碟.</p>
<p>在電腦輔助設計室中, 以 USB 隨身碟啟動的 start_ipv4.bat 檔案內容: <a href="/downloads/start_ipv4_hybrid.txt">start_ipv4_hybrid.txt</a></p>
<p>在動態系統中加入 run 頁面的 html 原始碼: <a href="https://mde.tw/cp2021_hw/downloads/run.txt">run.txt</a></p>
<p>當你建立 Github 帳號後就可以利用 Gist 儲存資料或程式碼, 且可以利用 <a href="https://mde.tw/cp2021/content/run.html">https://mde.tw/cp2021/content/run.html</a> 來執行 Brython 程式.</p>
<p>在 <a href="https://mde.tw/cp2021/content/run.html">run.html</a> 執行 Brython 程式, 可以使用下列三種方法:</p>
<ol>
<li>直接連線至 <a href="https://mde.tw/cp2021/content/run.html">https://mde.tw/cp2021/content/run.html</a> 將 Brython 程式寫在編輯區, 然後按下 Run.</li>
<li>將 Brython 程式存在 Gist, 利用 run.html?src=Gist_URL, <a href="https://mde.tw/cp2021/content/run.html">run.html</a> 中的 Javascript 就會導入此 Gist 程式執行.</li>
<li>將 Brython 程式寫在 <a href="https://mde.tw/cp2021/content/run.html">run.html</a> 頁面 html 超文件中, 然後安排其中的 Javascript 或 Brython 程式導入執行.</li>
</ol>
<p>建立可攜程式系統時必須了解 start_ipv4.bat 或 start_ipv6.bat 中的所有指令用法:</p>
<p>以電腦輔助設計室中使用新電腦的 USB 可攜 Hybrid 設定 start_ipv4.bat 為例.</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off<span></span>
set Disk=y<span></span>
subst %Disk%: "data"<span></span>
<span></span>
set Local=C:\2021_cadlab_portable\data<span></span>
<span></span>
%Disk%:<span></span>
<span></span>
set HomePath=%Disk%:\home_ipv4<span></span>
set HomeDrive=%Disk%:\home_ipv4<span></span>
set Home=%Disk%:\home_ipv4<span></span>
set USERPROFILE=%Disk%:\home_ipv4<span></span>
<span></span>
REM 將系統 Python 程式的 io 設為 utf-8<span></span>
set PYTHONIOENCODING="utf-8"<span></span>
<span></span>
set PYTHONPATH=%Local%\Python395\DLLs;%Local%\Python395\Lib;%Local%\Python395\Lib\site-packages;<span></span>
<span></span>
set PYTHONHOME=%Local%\Python395<span></span>
<span></span>
REM 使用 putty 設定 git ssh 連線<span></span>
set GIT_SSH=%Disk%:\putty\plink.exe<span></span>
<span></span>
REM 設定跟 Python 有關的命令搜尋路徑<span></span>
set path_python=%Local%\Python395;%Local%\Python395\Scripts;<span></span>
set path_portablegit=%Local%\portablegit_2.31.1\bin;<span></span>
<span></span>
path=%Disk%:;%path_python%;%path_portablegit%;%path%;<span></span>
<span></span>
REM ref: https://drive.google.com/file/d/1S0XYN-1MKxo0KFYxs0pFTcTrr8NL4n1b/view<span></span>
<span></span>
REM REGEDIT.EXE /S %Disk%:\putty_github_com.reg;<span></span>
<span></span>
start /MIN cmd.exe<span></span>
start /MIN cmd.exe<span></span>
start /MIN cmd.exe<span></span>
start /MIN cmd.exe<span></span>
<span></span>
start /MIN %Disk%:\wScite\SciTE.exe<span></span>
start /MIN %Disk%:\wScite\SciTE.exe<span></span>
<span></span>
Exit</pre>
<p>因為電腦 C:\ 中存放的可攜系統位於 C:\2021_cadlab_portable\data, 因此將此路徑設為 Local 變數, 然後與 Python 即 Portablegit 有關的路徑都使用 %Local% 變數設定.</p>
<p>有關 SSH push 設定必須將 putty 系統登錄檔案匯出後, 在啟動隨身系統時載入所需設定. <a href="https://drive.google.com/file/d/1S0XYN-1MKxo0KFYxs0pFTcTrr8NL4n1b/view">putty 設定登錄檔案匯出與匯入說明影片</a>.</p>
<p>Windows 指令:</p>
<p style="padding-left: 30px;"><a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/echo">echo off</a>, 而放在前面的 <a href="https://stackoverflow.com/questions/8486042/what-does-mean-in-windows-batch-scripts">@ 指令說明</a>.</p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/List_of_DOS_commands#SET">set</a>: 設定<a href="https://ss64.com/nt/syntax-variables.html">環境變數</a>.</p>
<p style="padding-left: 30px;">HomePath, HomeDrive, Home, USERPROFILE 都屬於 Windows 操作系統的<a href="https://ss64.com/nt/syntax-variables.html">環境變數</a>.</p>
<p><a href="https://mde.tw/cp2021_hw/content/run.html?src=https://gist.githubusercontent.com/mdecourse/3db55f124185def5aac8e5d51579c484/raw/cc346e5ed77c63051ea69c985b191d8bd3afc1fc/red_rect1.py">HW1-1</a>: 將左右碰撞移動的紅色方塊, 改為先移動到水平畫面中心點位置後, 接著上下碰撞移動.</p>
<p><a href="https://mde.tw/cp2021_hw/content/run.html?src=https://gist.githubusercontent.com/mdecourse/3db55f124185def5aac8e5d51579c484/raw/cc346e5ed77c63051ea69c985b191d8bd3afc1fc/red_rect2_with_start_button.py">HW1-2</a>: 加入與 <a href="https://mde.tw/cp2021/content/Cango.html">Cango 頁面</a> Fourbar 程式碼相同功能的啟動按鈕, 讓使用者可以利用按鈕啟動或中斷紅色方塊上下碰撞移動. 完成後請將程式碼存入個人 Gist 區.</p>
<hr/>
<p>HW2 - 可攜程式系統與個人網站佔學期成績 20%.</p>
<p><a href="https://github.com/mdecourse/cp2021/discussions/9">HW2 具體項目成果回報區</a></p>
<p>可攜程式系統與 Python 範例程式收集整理</p>
<p>1. 請準備一個至少 64 GB 大小的 USB 3.0 以上隨身碟 (或外接 SSD), 根據 <a href="https://mde.tw/cp2021/content/Task2.html">Task2</a> 中的說明, 建立自己的可攜程式系統. </p>
<p>2. 請登入 Github 帳號後, 連線至 <a href="https://github.com/mdecourse/cp2021_hw">https://github.com/mdecourse/cp2021_hw</a> 後, 透過 <span style="background-color: #00ff00;">Use this template</span> 按鈕建立自己的 cp2021_hw 倉儲. 並至該倉儲的 Settings -&gt; Pages -&gt; Source 將 main 分支設為 Github Pages 的 root (也就是選擇將倉儲的 main 分支設為對應網站的根目錄).</p>
<p>3. 請將 HW1 與 HW2 的作業內容登錄至個人的 cp2021_hw 倉儲與網站中. (學習如何透過 git 指令修改倉儲中的版本內容)</p>
<p>4. 請在個人作業網站的 HW2 區域下增設一個 H2 頁面, 將該網頁標題命名為 run, 可以如 <a href="https://mde.tw/cp2021/content/run.html">run</a> 頁面中的內容, 並且利用此頁面收集 Python 範例程式. (例如: 可自動執行的貪食蛇: <a href="https://mde.tw/cp2021/content/run.html?src=https://gist.githubusercontent.com/mdecourse/d306a1f57e53bfd6466eaae20bcb9439/raw/2160a12b9fec9707a120a383ed5d38b9b78a02cf/snake.py">https://mde.tw/cp2021/content/run.html?src=https://gist.githubusercontent.com/mdecourse/d306a1f57e53bfd6466eaae20bcb9439/raw/2160a12b9fec9707a120a383ed5d38b9b78a02cf/snake.py</a> 將 <a href="https://gist.github.com/mdecourse/d306a1f57e53bfd6466eaae20bcb9439">https://gist.github.com/mdecourse/d306a1f57e53bfd6466eaae20bcb9439</a> 作為 <a href="https://mde.tw/cp2021/content/run.html">https://mde.tw/cp2021/content/run.html</a> 頁面中 src 變數的值, 就可以在頁面中導入程式碼並執行)</p>
<h2>Python</h2>
<h4>4 小時 Python 互動學習:</h4>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/want-to-learn-python-heres-our-free-4-hour-interactive-course/">https://www.freecodecamp.org/news/want-to-learn-python-heres-our-free-4-hour-interactive-course/</a></p>
<h4>Princeton Python 課程簡介:</h4>
<p style="padding-left: 30px;"><a href="https://introcs.cs.princeton.edu/python/home/">https://introcs.cs.princeton.edu/python/home/</a></p>
<h2>run1</h2>
<p>第一種在網頁執行 Brython 程式的方法, 是使用者在網際程式編輯區輸入 Brython 程式碼, 必須手動按下 Run 才能執行. 本網頁 html 的 <a href="/downloads/run1.txt">run1.txt</a>.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- 印出版次與關鍵字程式 --></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd(ev):
    bd = doc["brython_div"]
    bd.clear()
# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/e896a4705a95ac8cc4147b355b0e87ef/raw/8954b8280c524c5781dc3c0b3565bc489d3aa3a3/cango_gear1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace.editor.setValue(prog)
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    #Ace.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
doc['clear_bd'].bind('click', clear_bd)
# 呼叫函式執行
run()
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<!-- 存擋表單開始 --><form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form><!-- 存擋表單結束 -->
<p></p>
<!-- 執行與清除按鈕開始 -->
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除輸出區</button><button id="clear_bd">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<!-- 執行與清除按鈕結束 -->
<p></p>
<!-- 程式執行 ouput 區 -->
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 -->
<div id="brython_div"></div>
<!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<p>
<script src="https://mde.tw/cp2021/cmsimde/static/Cango-24v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/gearUtils-09.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/SVGpathUtils-6v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/sylvester.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/PrairieDraw.js"></script>
</p>
<h2>run2</h2>
<p>第二種執行 Brython 程式的方法, 是將 Brython 程式存在 Gist, 利用 run.html?src=Gist_URL, <a href="https://mde.tw/cp2021/content/run.html">run.html</a> 中的 Javascript 就會導入此 Gist 程式並自動執行.</p>
<p><a href="https://mde.tw/cp2021_hw/content/run.html?src=https://gist.githubusercontent.com/mdecourse/e896a4705a95ac8cc4147b355b0e87ef/raw/8954b8280c524c5781dc3c0b3565bc489d3aa3a3/cango_gear1.py">按下導入 cango_gear1.py 且自動執行</a></p>
<p>上述連結為:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">https://mde.tw/cp2021_hw/content/run.html?src=https://gist.githubusercontent.com/mdecourse/e896a4705a95ac8cc4147b355b0e87ef/raw/8954b8280c524c5781dc3c0b3565bc489d3aa3a3/cango_gear1.py</pre>
<p>run.html 後的變數為 ?src=<code class="js comments">https://gist.githubusercontent.com/mdecourse/e896a4705a95ac8cc4147b355b0e87ef/raw/8954b8280c524c5781dc3c0b3565bc489d3aa3a3/cango_gear1.py</code></p>
<p>其中的 <code class="js comments">e896a4705a95ac8cc4147b355b0e87ef</code> 為 gist 檔案群組編號, 而隨後的 <code class="js comments">8954b8280c524c5781dc3c0b3565bc489d3aa3a3</code> 則為 cango_gear1.py 的版次編號.</p>
<p>本網頁的 html <a href="/downloads/run2.txt">run2.txt</a>.</p>
<h2>run3</h2>
<p>第三種在網頁中執行 Brython 的方法, 是直接將程式寫在 html 網頁中執行. 本頁面的 html 程式碼為 <a href="/downloads/run3.txt">run3.txt</a>.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
# Spur Gear in Cango and gearUtils-09.js
from browser import document as doc
from browser import html
from browser import window
import browser.timer
import math
# 利用 html 建立一個 CANVAS 標註物件, 與變數 canvas 對應
canvas = html.CANVAS(width = 600, height = 400)
# 將 canvas 標註的 id 設為 "cango_gear"
canvas.id = "cango_gear"
# 將 document 中 id 為 "brython_div" 的標註
# 設為與 brython_div 變數對應
brython_div = doc["brython_div"]
# 將 canvas 標註放入 brython_div 所在位置
brython_div <= canvas
# 將頁面中 id 為 cango_gear 的 CANVAS 設為與 canvas 對應
canvas = doc["cango_gear"]
# convert Javascript objects to Brython variables
cango = window.Cango.new
circle = window.circle.new
shape = window.Shape.new
path = window.Path.new
creategeartooth = window.createGearTooth.new
svgsegs = window.SVGsegs.new
# 經由 Cango 轉換成 Brython 的 cango
# 指定將圖畫在 id="cango_gear" 的 canvas 上
cgo = cango("cango_gear")
# 以下將要使用 gearUtils-09.js 畫出正齒輪外形
# 假設齒數為 25
num = 25
# 利用 gearUtils-09 產生單一齒輪外形資料
tooth = creategeartooth(10, num, 20)
# 在 Cango 中, 只有 SVG 才能 rotate, appendPath 或 joinPath
# 將齒輪外形轉為 SVG segment
toothSVG = svgsegs(tooth)
path1 = path(toothSVG.scale(1), {"degs": 45, "x": 100, "y": 100, "strokeColor": "#606060"})
#print(path1)
# SVG list
circle = circle(50)
#print(circle)
circleSVG = svgsegs(circle)
#print(circleSVG)
# 若將 circleSVG 轉為 Cango path, 則可以用 cgo.render()
#circlePath = path(circleSVG, {"x": 100, "y": 100, "strokeColor": "#606060"})
#cgo.render(circlePath)
# svgsegs 資料可以 joinPath 或 appendPath
# joinPath 按照頭尾順序銜接
# appendPath 則無順序銜接
# 從 toothSVG 複製出單齒 SVG 資料
one = toothSVG.dup()
# 以照齒數, 逐一複製並附加在原單齒資料中
# 第一齒的資料已經在 toothSVG 中, 因此重複迴圈從 1 開始
for i in range(1, num):
    newSVG = one.rotate(360*i/num)
    toothSVG = toothSVG.appendPath(newSVG)
# 將 SVG 轉為 path 資料
#gear = path(toothSVG, {"x": 150, "y": 150, "strokeColor": "#606060"})
# path 資料可以透過 cgo.render()顯示繪圖物件
#cgo.render(gear)
# 當 circle 接外齒使用 appendPath
toothSVG = toothSVG.appendPath(circleSVG)
#print(toothSVG)
spurPath = path(toothSVG, {"x": 150, "y": 150, "strokeColor": "#606060"})
cgo.render(spurPath)
</script>
</p>
<!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 -->
<div id="brython_div"></div>
<!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<p>
<script src="https://mde.tw/cp2021/cmsimde/static/Cango-24v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/gearUtils-09.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/SVGpathUtils-6v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/sylvester.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/PrairieDraw.js"></script>
</p>
<h2>Server</h2>
<p>在電腦輔助設計室中的 11 台舊電腦, 因為第三磁區並沒有保護, 因此可以設定為 Flask 與 Fossil SCM server 主機.</p>
<p>六台新電腦中的一台可以透過 <a href="https://support.microsoft.com/zh-tw/windows/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E9%81%A0%E7%AB%AF%E6%A1%8C%E9%9D%A2-5fe128d5-8fb1-7a23-3b8a-41e636865e8c">remote desktop</a> 連線至各分組的伺服器進行設定.</p>
<p>至於在 Windows 10 中可以利用 <a href="https://nssm.cc/">https://nssm.cc/</a> 將應用程式設為 service.</p>
<p style="padding-left: 30px;">nssm install 服務名稱</p>
<p style="padding-left: 30px;">nssm edit 服務名稱</p>
<h4>Windows 10 中的動態課程網頁系統:</h4>
<h4 style="padding-left: 30px;">以 waitress 執行 cmsimde/wsgi.py:</h4>
<p style="padding-left: 60px;">python -m pip install waitress</p>
<p>建立一個 waitress_server.py:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 執行前, 必須要先利用 python -m pip install waitress 安裝 wairess 模組<span></span>
# 接著從 waitress 導入 serve<span></span>
from waitress import serve<span></span>
 <span></span>
# 導入 flaskapp<span></span>
"""<span></span>
在不將 cmsimde 目錄納入 sys.path 搜尋路徑時, <span></span>
可以複製一份 cmsimde/nocache.py 至倉儲目錄. <span></span>
或者將 cmsimde 納入系統搜尋路徑中, <span></span>
且必須放在導入 flaskapp  之前<span></span>
"""<span></span>
import sys<span></span>
sys.path.append("./cmsimde")<span></span>
from cmsimde import flaskapp<span></span>
 <span></span>
# run flaskapp.app with production waitress<span></span>
serve(flaskapp.app, host='0.0.0.0', port=5000, url_scheme='https')</pre>
<p>接著先除去 url_scheme='https' 後以 python waitress_server.py 執行. cmsimde 主機將可透過瀏覽器連結 <a href="http://server_ip:5000">http://server_ip:5000</a></p>
<p>接下來則可以利用 <a href="https://www.stunnel.org/">Stunnel</a> 作為 https 代理主機, 作為 <a href="http://server_ip:5000">http://server_ip:5000</a> 與外部瀏覽器連接的代理轉接者.</p>
<h4>stunnel.conf 設定內容:</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[https]<span></span>
accept = 8443<span></span>
connect = 5000<span></span>
cert = fullchain.pem<span></span>
key = privkey.pem<span></span>
TIMEOUTclose = 0</pre>
<p>cmsimde 系統的靜態網頁則可以利用 <a href="https://nginx.org/">Nginx</a> 伺服.</p>
<p>Nginx 在 Ubuntu /etc/nginx/sites-available/default 中的設定:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">server {<span></span>
    listen 80;<span></span>
    listen [::]:80;<span></span>
    root /home/wcm2021/newcms;<span></span>
    index index.html;<span></span>
   <span></span>
    location /static {<span></span>
        alias /home/wcm2021/newcms/cmsimde/static/;<span></span>
    }<span></span>
   <span></span>
    location /downloads {<span></span>
        alias /home/wcm2021/newcms/downloads/;<span></span>
    }<span></span>
   <span></span>
    location /images {<span></span>
        alias /home/wcm2021/newcms/images/;<span></span>
    }<span></span>
   <span></span>
    location / {<span></span>
            try_files $uri $uri/ =404;<span></span>
    } <span></span>
       <span></span>
    location /blog {<span></span>
        alias /home/wcm2021/cmsimfly/blog/;<span></span>
    }<span></span>
   <span></span>
    location /reveal {<span></span>
        alias /home/wcm2021/cmsimfly/reveal/;<span></span>
    }<span></span>
}<span></span>
   <span></span>
server {<span></span>
    listen 443 ssl;<span></span>
    #listen [::]:443 ssl ipv6only=on;<span></span>
    <span></span>
    location /static {<span></span>
        alias /home/wcm2021/cmsimfly/static/;<span></span>
    }<span></span>
    <span></span>
    location / {<span></span>
        include uwsgi_params;<span></span>
        uwsgi_pass  127.0.0.1:8080;<span></span>
    }<span></span>
    <span></span>
    #server_name ipv4_ip; <span></span>
    #ssl on;<span></span>
    ssl_certificate /etc/stunnel/localhost.crt;<span></span>
    ssl_certificate_key /etc/stunnel/localhost.key;<span></span>
    ssl_session_timeout 5m;<span></span>
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;<span></span>
    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";<span></span>
    ssl_prefer_server_ciphers on;<span></span>
    try_files $uri $uri/ =404;<span></span>
}<span></span>
    <span></span>
server {<span></span>
    #listen 89 default_server;<span></span>
    #listen [::]:89 default_server ipv6only=on;<span></span>
    <span></span>
    listen 8943 ssl;<span></span>
    #listen [::]:8943 ssl ipv6only=on;<span></span>
    <span></span>
    location /static {<span></span>
        alias /home/wcm2021/cmsimfly2/static/;<span></span>
    }<span></span>
    <span></span>
    location / {<span></span>
        include uwsgi_params;<span></span>
        uwsgi_pass  127.0.0.1:8082;<span></span>
    }<span></span>
    <span></span>
    #server_name ipv4_ip;<span></span>
    #ssl on;<span></span>
    ssl_certificate /etc/stunnel/localhost.crt;<span></span>
    ssl_certificate_key /etc/stunnel/localhost.key;<span></span>
    ssl_session_timeout 5m;<span></span>
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;<span></span>
    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";<span></span>
    ssl_prefer_server_ciphers on;<span></span>
    try_files $uri $uri/ =404;<span></span>
}<span></span>
   <span></span>
server {<span></span>
    #listen 88 default_server;<span></span>
    #listen [::]:88 default_server ipv6only=on;<span></span>
    <span></span>
    listen 8843 ssl;<span></span>
    #listen [::]:8843 ssl ipv6only=on;<span></span>
    <span></span>
    location /static {<span></span>
        alias /home/wcm2021/newcms/cmsimde/static/;<span></span>
    }<span></span>
    <span></span>
    location / {<span></span>
        include uwsgi_params;<span></span>
        uwsgi_pass  127.0.0.1:8081;<span></span>
    }<span></span>
    <span></span>
    #server_name ipv4_ip;<span></span>
    #ssl on;<span></span>
    ssl_certificate /etc/stunnel/localhost.crt;<span></span>
    ssl_certificate_key /etc/stunnel/localhost.key;<span></span>
    ssl_session_timeout 5m;<span></span>
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;<span></span>
    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";<span></span>
    ssl_prefer_server_ciphers on;<span></span>
    try_files $uri $uri/ =404;<span></span>
}</pre>
<p></p>
<h2>W11-1</h2>
<h4>Examples</h4>
<p><a href="/downloads/w11_notes.txt">w11_notes.txt</a></p>
<p><a href="/downloads/w11_1b_p261.txt">w11_1b_p261.txt</a></p>
<p><a href="/downloads/w11_class.txt">w11_class.txt</a></p>
<p>以下為 <a href="https://mde.tw/cp2021_hw/content/W11.html">https://mde.tw/cp2021_hw/content/W11.html</a> 按鈕範例.</p>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕. (本動態頁面檔案 <a href="/downloads/Examples.txt">Examples.txt</a>)</p>
<p>1. 從 1 累加到 100 (以下列 button 呈現).</p>
<p>2. 教科書 (<a href="https://link.springer.com/book/10.1007/978-981-10-3277-6">Programming with Python</a>) 2.6 Exercises, 共有三個題目, 請分別將程式製作為按鈕 (button).</p>
<p>3. 請利用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API">Canvas</a> 繪製 Fig. 3.7 的流程圖 (Flow Chart).</p>
<p>4. 請利用 Canvas 繪製你所編寫"從 1 累加到 10"程式的流程圖 (Flow Chart).</p>
<p>5. 請各班各組合力完成 3.5 Exercises 中的 14 個題目.</p>
<p>6. 請各組從 4.3 Exercises 中選擇一個題目製作為頁面中的按鈕 (button).</p>
<p>無 <a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API">Canvas</a> 繪圖需求的程式, 可放在第一區, 而採 <a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API">Canvas</a> 繪圖的程式則可放入第二區.</p>
<p>將 Gist 中的程式導入本頁面的程式段: <a href="/downloads/brython_button_prog.txt">brython_button_prog.txt</a>, 只要配合 button id 對應即可導入編輯區.</p>
<p><button id="add1to100">1 add to 100</button><button id="p261">p261</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<!-- 內建程式 1 ####################################### 內建程式 1 開始-->
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<!-- 內建程式 1 ####################################### 內建程式 1 結束-->
<p></p>
<!-- button 程式 1 ####################################### button 程式 1 開始-->
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace2.editor.setValue(open(self.url).read())
        Ace2.editor.scrollToRow(0)
        Ace2.editor.gotoLine(0)
        Ace2.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"
add1to100 = button2(add1to100_url)
doc["add1to100"].bind('click', add1to100.do)
################################# p261 start 
p261_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/980606effcd29635307d6474718cd4a7ef016747/p261.py"
p261 = button2(p261_url)
doc["p261"].bind('click', p261.do)
################################## p261 end
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<div id="brython_div1"></div>
<p><!-- editor1 結束 --></p>
<hr/>
<p><!-- button 程式 1 ####################################### button 程式 1 結束--></p>
<p></p>
<p><!-- button 程式 2 ####################################### button 程式 2 開始--></p>
<p>第二編輯區程式 (<a href="https://gist.github.com/mdecourse/fd325f7ff3fb71a9653bf156fe53d7dc">編輯</a> Snake 原始碼):</p>
<p><button id="check_input">查驗輸入字串</button><button id="snake">Snake</button><button id="snake2">Snake2</button></p>
<p><!-- 判斷輸入字串是否aA1$, 且至少 8 個字元-開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

check_str_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/56dc6a6b8eaa05b80994ac6f08ebc9326330be43/check_str_input_content_1.py"
# 從 gist 取得程式碼
check_src = open(check_str_url).read()

def check_input(ev):
    Ace3.editor.setValue(check_src)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    #Ace.run()

# id 為 "check_input" 的按鈕點按時, 執行 check_input 方法
doc["check_input"].bind('click', check_input)
###################################### snake 開始
# 將 Ace3 編輯器對應的 button 寫為 class
class button3:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace3.editor.setValue(open(self.url).read())
        Ace3.editor.scrollToRow(0)
        Ace3.editor.gotoLine(0)
        Ace3.run()

# 利用 button class 建立案例
# for snake
snake_url = "https://gist.githubusercontent.com/mdecourse/d55158478f4f8fcbfedd455f8be8c7b6/raw/706bb9583d97f2e4b8e9027e686489e28f43cad9/brython_snake.py"
snake = button3(snake_url)
doc["snake"].bind("click", snake.do)
# for snake2
snake2_url = "https://gist.githubusercontent.com/mdecourse/d55158478f4f8fcbfedd455f8be8c7b6/raw/706bb9583d97f2e4b8e9027e686489e28f43cad9/snake_pathfinding_ai_curses.py"
snake2 = button3(snake2_url)
doc["snake2"].bind("click", snake2.do)
###################################### snake 結束
# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定 - 第二編輯區 Ace3 共用
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
</script>
</p>
<p><!-- 判斷輸入字串是否aA1$, 且至少 8 個字元-結束--></p>
<p><!-- editor2 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<div id="brython_div2"></div>
<p><!-- editor2 結束 --></p>
<p></p>
<p><!-- button 程式 2 ####################################### button 程式 2  結束--></p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="https://mde.tw/cp2021/cmsimde/static/Cango-24v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/gearUtils-09.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/SVGpathUtils-6v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/sylvester.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/PrairieDraw.js"></script>
</p>
<h4>References:</h4>
<p style="padding-left: 30px;"><a href="https://zerojudge.tw/">https://zerojudge.tw/</a></p>
<p style="padding-left: 30px;"><a href="https://shaform.com/csdream/docs/problem-solving/">https://shaform.com/csdream/docs/problem-solving/</a></p>
<p style="padding-left: 30px;"><a href="https://onlinejudge.org/">https://onlinejudge.org/</a></p>
<h2>W12-1</h2>
<p><a href="/downloads/w12.txt">w12.txt</a></p>
<p><a href="https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China#Construction_details">ROC 國旗規格</a>.</p>
<p><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E5%9B%BD%E6%97%97#%E8%A7%84%E6%A0%BC">PROC 國旗規格</a> - 可以根據此規格定義, 新增 <button id="procflas">PROC flag</button> 按鈕.</p>
<p><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_States#Specifications">USA 國旗規格</a> - 可以根據此規格定義, 新增 <button id="usaflag">USA flag</button> 按鈕.</p>
<!-- 導入 brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="https://mde.tw/cp2021/cmsimde/static/Cango-24v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/gearUtils-09.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/SVGpathUtils-6v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/sylvester.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/PrairieDraw.js"></script>
</p>
<p><button id="add1to100">add 1 to 100</button><button id="p261">p261</button><button id="rocflag">ROC flag</button></p>
<p><!-- ######################  editor1 開始 ###################### --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<!-- 這裡的畫布 id 為 brython_div -->
<div id="brython_div"></div>
<p><!-- ######################  editor1 結束 ###################### --></p>
<!-- 以下可以開始利用 editor1 的設定編寫對應 Brython 程式 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    # 注意這裡清除的畫布 id 為 brython_div
    bd = doc["brython_div"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
<!-- 以上為內建程式, 頁面可透過 ?src=gist_url 執行 -->
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace2.editor.setValue(open(self.url).read())
        Ace2.editor.scrollToRow(0)
        Ace2.editor.gotoLine(0)
        Ace2.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"
add1to100 = button2(add1to100_url)
doc["add1to100"].bind('click', add1to100.do)
################################# p261 start 
p261_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/980606effcd29635307d6474718cd4a7ef016747/p261.py"
p261 = button2(p261_url)
doc["p261"].bind('click', p261.do)
################################## p261 end
################################## rocflag start
rocflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/0e2ca81d5c2539c4b6c86071c8cf9de0b1251b9c/roc_flag.py"
rocflag = button2(rocflag_url)
doc["rocflag"].bind("click", rocflag.do)
################################## rocflag end
</script>
</p>
<h1>W10</h1>
<p>W10 之後, 開始執行 <span style="background-color: #ccffcc;">HW3</span> 與 <span style="background-color: #ccffcc;">Final Project</span>.</p>
<p>從 cp2021 課程內容中可知計算機程式的課程目的:</p>
<p style="padding-left: 30px;">鼓勵每一位同學都能及早<span style="background-color: #ffff99;">確定努力的目標</span>, 證明自己具備<span style="background-color: #ffff99;">獨立研究與解題能力</span>.</p>
<p>由於 <span style="background-color: #ccffcc;">HW1</span> 的目的在提醒電腦程式的編寫牽涉鍵盤中英文打字, 因此學員必須自行練就 touch typing 的能力, 可正確無誤快速 keyin 所需的程式碼以及相關說明內容.</p>
<p><span style="background-color: #ccffcc;">HW1</span> 的程式編寫內容是修改一個 Brython 動畫程式, 讓紅色方塊能在使用者視覺暫留時間內移動座標位置, 可在特定位置時改變移動方向. 完成程式修改後則要求將程式碼存入個人的 Gist 區域.</p>
<p><span style="background-color: #ccffcc;">HW2</span> 則要求使用者建立在 Windows 10 64 位元操作系統中的 Python 可攜程式系統, 主要內容帶有 Python 3.9.5 與 Portablegit 2.31.1 版, 可以用來啟動近端採 Flask 編寫的 <a href="https://github.com/mdecourse/cp2021_hw">https://github.com/mdecourse/cp2021_hw</a> 課程動態網頁, 並用瀏覽器編輯後將動態網頁轉為只帶有 html, css 與 javascript 的靜態網頁後, 推送至 Github Pages 網站中伺服.</p>
<p><span style="background-color: #ccffcc;">HW2</span> 除了建立可攜程式系統外, 也要求將 <span style="background-color: #ccffcc;">HW1</span> 中的 Gist 程式碼, 以 <a href="https://mde.tw/cp2021_hw/downloads/run.txt">run.txt</a> (<a href="https://mde.tw/cp2021_hw/content/runsrc.html">runsrc</a>) 的動態內容執行.</p>
<p>至於從 <span style="background-color: #ccffcc;">HW2</span> 進展到 <span style="background-color: #ccffcc;">HW3</span> 網際 Brython 貪食蛇的編寫與修改, 需要:</p>
<ol>
<li>配合各種程式語法, 從<a href="https://mde.tw/cp2021/content/%E6%95%99%E7%A7%91%E6%9B%B8%E5%B0%8E%E8%AE%80.html">教科書導讀</a>中, 整理 Brython 與 CPython 的程式語法說明</li>
<li>在個人課程網頁中, 整理 <a href="https://www.freecodecamp.org/news/want-to-learn-python-heres-our-free-4-hour-interactive-course/">4 小時 Python 互動課程</a>的內容.</li>
<li>將線上課程中的 Python <a href="https://introcs.cs.princeton.edu/python/home/">程式範例</a>, 分門別類改寫為 Brython 程式, 並依照 <a href="https://mde.tw/cp2021_hw/content/Practice2.html">Practice2</a> 格式以按鈕導入執行.</li>
<li>了解 <a href="https://gist.githubusercontent.com/mdecourse/fd325f7ff3fb71a9653bf156fe53d7dc/raw/158c74d1df8313c723d16c2b42fbd2c34a0c1de8/snake_pathfinding_ai_curses.py">Pathfinding Snake 程式</a>執行原理 (資料結構與演算法, <a href="https://interactive-pathfinding.netlify.app/">搜尋圖解</a>1, <a href="https://github.com/mdecourse/Visualization-of-popular-algorithms-in-Python">搜尋圖解</a>2), 將程式改為 Brython 格式後, 直接在 <a href="https://mde.tw/cp2021_hw/content/Practice2.html">Practice2</a> 的按鈕中執行.</li>
</ol>
<p><span style="background-color: #ccffcc;">HW3</span> Snake Game 的程式設計未來可以發展為 AI 程式競賽 (<a href="/downloads/Snakes AI Competition 2020 and 2021 Report.pdf">Snakes AI Competition 2020 and 2021 Report.pdf</a>). (<a href="https://github.com/ahendy/snakexd.ai">參考1</a>, <a href="https://github.com/mdecourse/battle_snake">參考2</a>, <a href="https://github.com/smallsco/robosnake">參考3</a>, <a href="https://aws.amazon.com/blogs/machine-learning/building-an-ai-powered-battlesnake-with-reinforcement-learning-on-amazon-sagemaker/">參考4</a>)</p>
<p>各學員完成上述各項內容後, 可以自選題目完成 <a href="https://mde.tw/cp2021_hw/content/Final%20Project.html">Final Project</a>.</p>
<h4>References:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/snake-game">https://github.com/mdecourse/snake-game</a></p>
<p style="padding-left: 30px;"><a href="https://kevinkparsons.com/snake-game.html">https://kevinkparsons.com/snake-game.html</a> (<a href="/downloads/snake-game_excel.zip">snake_game in Excel</a>)</p>
<p style="padding-left: 30px;"><a href="/downloads/snake_curses_and_tk.zip">snake_curses_and_tk.zip</a></p>
<h2>W11</h2>
<p><a href="https://mde.tw/cp2021/content/run.html?src=https://gist.githubusercontent.com/mdecourse/040036c57b1d81cc1c0608fe66316651/raw/42746c1e3d22aefbf0bd78fec4945d1c54243930/cp2021_1a_random_select.py">1a 抽點 10 位學員</a>查驗其作業倉儲與網站 (<a href="https://mde.tw/cp2021/content/run.html?src=https://gist.githubusercontent.com/mdecourse/040036c57b1d81cc1c0608fe66316651/raw/e7aa175bdf9d43d47ed521ab84bf6018054fe28e/cp2021_1a_list.py">1a 學員倉儲與網站</a>).</p>
<p><a href="https://mde.tw/cp2021/content/run.html?src=https://gist.githubusercontent.com/mdecourse/040036c57b1d81cc1c0608fe66316651/raw/42746c1e3d22aefbf0bd78fec4945d1c54243930/cp2021_1b_random_select.py">1b 抽點 10 位學員</a>查驗其作業倉儲與網站 (<a href="https://mde.tw/cp2021/content/run.html?src=https://gist.githubusercontent.com/mdecourse/040036c57b1d81cc1c0608fe66316651/raw/42746c1e3d22aefbf0bd78fec4945d1c54243930/cp2021_1b_list.py">1b 學員倉儲與網站</a>).</p>
<p>教科書 (<a href="https://link.springer.com/book/10.1007/978-981-10-3277-6">Programming with Python</a>) 2.6 Exercises, 共有三個題目 (1b 上課範例 - 倉儲 <a href="https://github.com/mdecourse/w11_1b">w11_1b</a> 網站 <a href="https://mde.tw/w11_1b">https://mde.tw/w11_1b</a>):</p>
<p><img caption="false" height="207" src="/images/cp_exercise2.6-1.png" width="400"/></p>
<p><img alt="" height="169" src="/images/cp_exercise2.6-2.png" width="400"/></p>
<p>請分別在個人網頁上利用 <a href="/downloads/Examples.txt">Examples.txt</a> 製作一個標題為 W11 的 H2 頁面, 並將上列解題程式製作為按鈕 (button).</p>
<h3>W11 demo</h3>
<h4>Examples</h4>
<p><a href="/downloads/w11demo.txt">w11demo.txt</a></p>
<p>以下為 <a href="https://mde.tw/cp2021_hw/content/W11.html">https://mde.tw/cp2021_hw/content/W11.html</a> 按鈕範例.</p>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕. (本動態頁面檔案 <a href="/downloads/Examples.txt">Examples.txt</a>)</p>
<p>1. 從 1 累加到 100 (以下列 button 呈現).</p>
<p>2. 教科書 (<a href="https://link.springer.com/book/10.1007/978-981-10-3277-6">Programming with Python</a>) 2.6 Exercises, 共有三個題目, 請分別將程式製作為按鈕 (button).</p>
<p>3. 請利用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API">Canvas</a> 繪製 Fig. 3.7 的流程圖 (Flow Chart).</p>
<p>4. 請利用 Canvas 繪製你所編寫"從 1 累加到 10"程式的流程圖 (Flow Chart).</p>
<p>5. 請各班各組合力完成 3.5 Exercises 中的 14 個題目.</p>
<p>6. 請各組從 4.3 Exercises 中選擇一個題目製作為頁面中的按鈕 (button).</p>
<p>無 <a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API">Canvas</a> 繪圖需求的程式, 可放在第一區, 而採 <a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API">Canvas</a> 繪圖的程式則可放入第二區.</p>
<p>將 Gist 中的程式導入本頁面的程式段: <a href="/downloads/brython_button_prog.txt">brython_button_prog.txt</a>, 只要配合 button id 對應即可導入編輯區.</p>
<p><button id="add1to100">1 add to 100</button><button id="p261">p261</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<!-- 內建程式 1 ####################################### 內建程式 1 開始-->
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<!-- 內建程式 1 ####################################### 內建程式 1 結束-->
<p></p>
<!-- button 程式 1 ####################################### button 程式 1 開始-->
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace2.editor.setValue(open(self.url).read())
        Ace2.editor.scrollToRow(0)
        Ace2.editor.gotoLine(0)
        Ace2.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"
add1to100 = button2(add1to100_url)
doc["add1to100"].bind('click', add1to100.do)
################################# p261 start 
p261_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/980606effcd29635307d6474718cd4a7ef016747/p261.py"
p261 = button2(p261_url)
doc["p261"].bind('click', p261.do)
################################## p261 end
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<div id="brython_div1"></div>
<p><!-- editor1 結束 --></p>
<hr/>
<p><!-- button 程式 1 ####################################### button 程式 1 結束--></p>
<p></p>
<p><!-- button 程式 2 ####################################### button 程式 2 開始--></p>
<p>第二編輯區程式 (<a href="https://gist.github.com/mdecourse/fd325f7ff3fb71a9653bf156fe53d7dc">編輯</a> Snake 原始碼):</p>
<p><button id="check_input">查驗輸入字串</button><button id="snake">Snake</button><button id="snake2">Snake2</button></p>
<p><!-- 判斷輸入字串是否aA1$, 且至少 8 個字元-開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

check_str_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/56dc6a6b8eaa05b80994ac6f08ebc9326330be43/check_str_input_content_1.py"
# 從 gist 取得程式碼
check_src = open(check_str_url).read()

def check_input(ev):
    Ace3.editor.setValue(check_src)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    #Ace.run()

# id 為 "check_input" 的按鈕點按時, 執行 check_input 方法
doc["check_input"].bind('click', check_input)
###################################### snake 開始
# 將 Ace3 編輯器對應的 button 寫為 class
class button3:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace3.editor.setValue(open(self.url).read())
        Ace3.editor.scrollToRow(0)
        Ace3.editor.gotoLine(0)
        Ace3.run()

# 利用 button class 建立案例
# for snake
snake_url = "https://gist.githubusercontent.com/mdecourse/d55158478f4f8fcbfedd455f8be8c7b6/raw/706bb9583d97f2e4b8e9027e686489e28f43cad9/brython_snake.py"
snake = button3(snake_url)
doc["snake"].bind("click", snake.do)
# for snake2
snake2_url = "https://gist.githubusercontent.com/mdecourse/d55158478f4f8fcbfedd455f8be8c7b6/raw/706bb9583d97f2e4b8e9027e686489e28f43cad9/snake_pathfinding_ai_curses.py"
snake2 = button3(snake2_url)
doc["snake2"].bind("click", snake2.do)
###################################### snake 結束
# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定 - 第二編輯區 Ace3 共用
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
</script>
</p>
<p><!-- 判斷輸入字串是否aA1$, 且至少 8 個字元-結束--></p>
<p><!-- editor2 開始 --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<div id="brython_div2"></div>
<p><!-- editor2 結束 --></p>
<p></p>
<p><!-- button 程式 2 ####################################### button 程式 2  結束--></p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="https://mde.tw/cp2021/cmsimde/static/Cango-24v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/gearUtils-09.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/SVGpathUtils-6v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/sylvester.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/PrairieDraw.js"></script>
</p>
<h4>References:</h4>
<p style="padding-left: 30px;"><a href="https://zerojudge.tw/">https://zerojudge.tw/</a></p>
<p style="padding-left: 30px;"><a href="https://shaform.com/csdream/docs/problem-solving/">https://shaform.com/csdream/docs/problem-solving/</a></p>
<p style="padding-left: 30px;"><a href="https://onlinejudge.org/">https://onlinejudge.org/</a></p>
<h2>Examples</h2>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕. (本動態頁面檔案 <a href="/downloads/Examples.txt">Examples.txt</a>)</p>
<p>1. 從 1 累加到 100 (以下列 button 呈現).</p>
<p>2. 教科書 (<a href="https://link.springer.com/book/10.1007/978-981-10-3277-6">Programming with Python</a>) 2.6 Exercises, 共有三個題目, 請分別將程式製作為按鈕 (button).</p>
<p>3. 請利用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API">Canvas</a> 繪製 Fig. 3.7 的流程圖 (Flow Chart).</p>
<p>4. 請利用 Canvas 繪製你所編寫"從 1 累加到 10"程式的流程圖 (Flow Chart).</p>
<p>5. 請各班各組合力完成 3.5 Exercises 中的 14 個題目.</p>
<p>6. 請各組從 4.3 Exercises 中選擇一個題目製作為頁面中的按鈕 (button).</p>
<p>無 <a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API">Canvas</a> 繪圖需求的程式, 可放在第一區, 而採 <a href="https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API">Canvas</a> 繪圖的程式則可放入第二區.</p>
<p>將 Gist 中的程式導入本頁面的程式段: <a href="/downloads/brython_button_prog.txt">brython_button_prog.txt</a>, 只要配合 button id 對應即可導入編輯區.</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<!-- 內建程式 1 ####################################### 內建程式 1 開始-->
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<!-- 內建程式 1 ####################################### 內建程式 1 結束-->
<p></p>
<!-- button 程式 1 ####################################### button 程式 1 開始-->
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()
# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- button 程式 1 ####################################### button 程式 1 結束-->
<p></p>
<!-- button 程式 2 ####################################### button 程式 2 開始-->
<p>第二編輯區程式 (<a href="https://gist.github.com/mdecourse/fd325f7ff3fb71a9653bf156fe53d7dc">編輯</a> Snake 原始碼):</p>
<p><button id="check_input">查驗輸入字串</button><button id="do_snake">Snake</button></p>
<p><!-- 判斷輸入字串是否aA1$, 且至少 8 個字元-開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

check_str_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/56dc6a6b8eaa05b80994ac6f08ebc9326330be43/check_str_input_content_1.py"
# 從 gist 取得程式碼
check_src = open(check_str_url).read()

def check_input(ev):
    Ace3.editor.setValue(check_src)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    #Ace.run()

# id 為 "check_input" 的按鈕點按時, 執行 check_input 方法
doc["check_input"].bind('click', check_input)

############ for snake 開始 ############

# 設定與 gist URL 對應的變數
snake_url = "https://gist.githubusercontent.com/mdecourse/d55158478f4f8fcbfedd455f8be8c7b6/raw/706bb9583d97f2e4b8e9027e686489e28f43cad9/brython_snake.py"
# 根據程式碼所在的 URL 從 gist 取得程式碼
snake_src = open(snake_url).read()

# 設計一個函式, 透過網頁的事件導向驅動方式, 
# 以 button 點擊後將 gist 原始碼導入編輯區(可令其自動執行)
def do_snake(ev):
    # 將程式碼導入編輯區, Ace3 將決定放入的編輯區域
    Ace3.editor.setValue(snake_src)
    # 程式碼導入後, 滑鼠停在第一行
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 取得程式碼後若帶有下一行表示希望即刻執行
    #Ace3.run()

# id 為 "do_snake" 的按鈕點按時, 執行 do_snake 方法
doc["do_snake"].bind('click', do_snake)
############ for snake 結束 ############

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定 - 第二編輯區 Ace3 共用
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
check_input()
</script>
</p>
<p><!-- 判斷輸入字串是否aA1$, 且至少 8 個字元-結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 -->
<p></p>
<!-- button 程式 2 ####################################### button 程式 2  結束-->
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="https://mde.tw/cp2021/cmsimde/static/Cango-24v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/gearUtils-09.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/SVGpathUtils-6v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/sylvester.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/PrairieDraw.js"></script>
</p>
<h4>References:</h4>
<p style="padding-left: 30px;"><a href="https://zerojudge.tw/">https://zerojudge.tw/</a></p>
<p style="padding-left: 30px;"><a href="https://shaform.com/csdream/docs/problem-solving/">https://shaform.com/csdream/docs/problem-solving/</a></p>
<p style="padding-left: 30px;"><a href="https://onlinejudge.org/">https://onlinejudge.org/</a></p>
<h2>Snakey</h2>
<p style="padding-left: 30px;"><a href="https://onlinejudge.org/">https://onlinejudge.org/</a></p>
<h2>W12</h2>
<p><a href="https://mde.tw/cp2019/downloads/Why%20Fossil-SCM%20is%20an%20excellent%20choice%20for%20introductory%20programming%20courses.pdf">Why Fossil SCM is an excellent choice for introductory programming courses</a></p>
<p><a href="http://brandon.invergo.net/news/2013-07-11-A-quick-introduction-to-version-control-with-Fossil.html">http://brandon.invergo.net/news/2013-07-11-A-quick-introduction-to-version-control-with-Fossil.html</a></p>
<p><a href="https://fossil-scm.org/home/doc/trunk/www/quickstart.wiki">https://fossil-scm.org/home/doc/trunk/www/quickstart.wiki</a></p>
<p><a href="https://fossil-scm.org/home/doc/trunk/www/th1.md">https://fossil-scm.org/home/doc/trunk/www/th1.md</a></p>
<p><a href="https://www.fossil-scm.org/home/doc/trunk/www/adding_code.wiki">https://www.fossil-scm.org/home/doc/trunk/www/adding_code.wiki</a></p>
<p><a href="http://www.beedub.com/book/tkbook.pdf">http://www.beedub.com/book/tkbook.pdf</a></p>
<p><a href="https://support-kb.spirent.com/resources/sites/SPIRENT/content/live/TRAINING/10000/TRN10235/en_US/Essentials_of_TCL_V2.pdf">Essentials of TCL</a></p>
<p>最原始的 Snakey.py 是在 CPython 命令列中, 利用 <a href="https://docs.python.org/3/howto/curses.html">Python curses</a> 執行. 這裡將要逐步改為能透過 Brython 直接在網頁中執行. 初步將無法在 Brython 環境運作的程式碼轉為 comment 的 <a href="https://gist.githubusercontent.com/mdecourse/d55158478f4f8fcbfedd455f8be8c7b6/raw/706bb9583d97f2e4b8e9027e686489e28f43cad9/snakey.py">Snakey.py</a>.</p>
<!-- 導入 brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- 內建程式碼導入--></p>
<!-- 以按鈕導入 snakey.py 程式碼 -->
<p><button id="do_snakey">Snakey</button></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd(ev):
    bd = doc["brython_div"]
    bd.clear()
# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/e896a4705a95ac8cc4147b355b0e87ef/raw/8954b8280c524c5781dc3c0b3565bc489d3aa3a3/cango_gear1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace.editor.setValue(prog)
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    #Ace.run()

############ for snakey 開始 ############

# 設定與 gist URL 對應的變數
snakey_url = "https://gist.githubusercontent.com/mdecourse/d55158478f4f8fcbfedd455f8be8c7b6/raw/706bb9583d97f2e4b8e9027e686489e28f43cad9/snakey.py"
# 根據程式碼所在的 URL 從 gist 取得程式碼
snake_src = open(snakey_url).read()

# 設計一個函式, 透過網頁的事件導向驅動方式, 
# 以 button 點擊後將 gist 原始碼導入編輯區(可令其自動執行)
def do_snakey(ev):
    # 將程式碼導入編輯區, Ace3 將決定放入的編輯區域
    Ace.editor.setValue(snake_src)
    # 程式碼導入後, 滑鼠停在第一行
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
    # 取得程式碼後若帶有下一行表示希望即刻執行
    #Ace.run()

# id 為 "do_snake" 的按鈕點按時, 執行 do_snake 方法
doc["do_snakey"].bind('click', do_snakey)
############ for snakey 結束 ############

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
doc['clear_bd'].bind('click', clear_bd)
# 呼叫函式執行
run()
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<!-- 存擋表單開始 --><form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form><!-- 存擋表單結束 -->
<p></p>
<!-- 執行與清除按鈕開始 -->
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除輸出區</button><button id="clear_bd">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<!-- 執行與清除按鈕結束 -->
<p></p>
<!-- 程式執行 ouput 區 -->
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 -->
<div id="brython_div"></div>
<!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="https://mde.tw/cp2021/cmsimde/static/Cango-24v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/gearUtils-09.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/SVGpathUtils-6v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/sylvester.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/PrairieDraw.js"></script>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/HNf3fD9Dg9A" title="YouTube video player" width="560"></iframe></p>
<h4>References:</h4>
<p style="padding-left: 30px;"><a href="https://blog.csdn.net/fox64194167/article/details/19965069">https://blog.csdn.net/fox64194167/article/details/19965069</a></p>
<p style="padding-left: 30px;"><a href="http://www.waitingfy.com/archives/846">http://www.waitingfy.com/archives/846</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/snake-4">https://github.com/mdecourse/snake-4</a></p>
<h1>Exam</h1>
<h2>W13</h2>
<p><span style="background-color: #ffff99;">1b:</span></p>
<p dir="auto" style="padding-left: 30px;">請在個人的 cp2021_hw 網頁上加上一個 H1 頁面, 標題為 Exam, 在其下加入一個 H2 的 W13 頁面, 將下列程式寫在個人的 gist 後, 導入執行.</p>
<p dir="auto" style="padding-left: 30px;">題目一: 請使用 random 模組, 以隨機方式列出六行文字如下:</p>
<p dir="auto" style="padding-left: 30px;">第 1 排隨機列出的序號為 3.<br/>......<br/>......</p>
<p dir="auto" style="padding-left: 30px;">題目二: 請使用 random 模組, 以隨機方式列出六行文字如下:</p>
<p dir="auto" style="padding-left: 30px;">第一排隨機列出的序號為 3.<br/>......<br/>......</p>
<p dir="auto" style="padding-left: 30px;">, 完成後將個人網頁連結留在<a href="https://github.com/mdecourse/cp2021/discussions/17">下列回應</a>, 並說明心得.</p>
<p dir="auto"><span style="background-color: #ffff99;">1a:</span></p>
<p dir="auto" style="padding-left: 30px;">請分別利用 random 模組中的 randint(), for 迴圈, range() 函式, 以及 str() 轉字串函式, 列出 10 行文字:</p>
<p dir="auto" style="padding-left: 30px;">在 18X18 的方格中以按鈕程式, 文字為"列出 10 個座標", 放在個人作業網站中的 Exam (H1) 頁面下的 W13 (H2) 頁面.</p>
<p dir="auto" style="padding-left: 30px;">執行後文字如下:</p>
<p dir="auto" style="padding-left: 30px;">第 1 個紅色方塊座標為 (10, 5).<br/>......</p>
<p dir="auto" style="padding-left: 30px;">......</p>
<p dir="auto" style="padding-left: 30px;">程式完成後, 請推向個人網頁後, 在下列回應中列出網站連結與心得.</p>
<p dir="auto" style="padding-left: 30px;">延伸應用:</p>
<p dir="auto" style="padding-left: 30px;">根據<a href="https://mde.tw/cp2021/content/%E7%95%AB%E5%87%BA%E5%BA%A7%E4%BD%8D%E8%A1%A8.html" rel="nofollow">畫出座位表</a>中的程式範例, 能否在 720 pixel x 720 pixel 的畫面中, 以黑色 1 pixel 的直線畫出 18 乘以 18 個方格圖形, 並在上述程式所產生的隨機座標方格中, 以阿拉伯數字按照數字順序, 標示 (以文字繪出) 在各 40 pixel x 40 pixel 方格中.</p>
<p dir="auto">如何將程式寫在 gist 並用按鈕帶出執行?</p>
<p dir="auto">random.randint() 用法? for 迴圈用法? range() 用法? str() 用法?</p>
<p dir="auto">在頁面中以 Brython 畫直線方法? 畫出字串方法?</p>
<p dir="auto">假如再加上 <a href="https://brython.info/static_doc/en/timer.html">https://brython.info/static_doc/en/timer.html</a> 的用法, 能否採隨機方式每間隔一段時間, 將隨機座標中的方格塗上紅色?</p>
<!-- 導入 brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="https://mde.tw/cp2021/cmsimde/static/Cango-24v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/gearUtils-09.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/SVGpathUtils-6v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/sylvester.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/PrairieDraw.js"></script>
</p>
<p><button id="add1to100">add 1 to 100</button><button id="p261">p261</button><button id="rocflag">ROC flag</button></p>
<p><!-- ######################  editor1 開始 ###################### --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<!-- 這裡的畫布 id 為 brython_div -->
<h3>W13-h2</h3>
<p><a href="/downloads/w12demo.txt">w12demo.txt</a></p>
<p><a href="https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China#Construction_details">ROC 國旗規格</a>.</p>
<p><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E5%9B%BD%E6%97%97#%E8%A7%84%E6%A0%BC">PROC 國旗規格</a> - 可以根據此規格定義, 新增 <button id="procflas">PROC flag</button> 按鈕.</p>
<p><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_States#Specifications">USA 國旗規格</a> - 可以根據此規格定義, 新增 <button id="usaflag">USA flag</button> 按鈕.</p>
<!-- 導入 brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="https://mde.tw/cp2021/cmsimde/static/Cango-24v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/gearUtils-09.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/SVGpathUtils-6v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/sylvester.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/PrairieDraw.js"></script>
</p>
<p><button id="add1to100">add 1 to 100</button><button id="p261">p261</button><button id="rocflag">ROC flag</button><button id="W13數字">W13數字</button><button id="W13國字">W13國字</button></p>
<p><!-- ######################  editor1 開始 ###################### --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<!-- 這裡的畫布 id 為 brython_div -->
<div id="brython_div"></div>
<p><!-- ######################  editor1 結束 ###################### --></p>
<!-- 以下可以開始利用 editor1 的設定編寫對應 Brython 程式 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    # 注意這裡清除的畫布 id 為 brython_div
    bd = doc["brython_div"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
<!-- 以上為內建程式, 頁面可透過 ?src=gist_url 執行 -->
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace2.editor.setValue(open(self.url).read())
        Ace2.editor.scrollToRow(0)
        Ace2.editor.gotoLine(0)
        Ace2.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"
add1to100 = button2(add1to100_url)
doc["add1to100"].bind('click', add1to100.do)
################################# p261 start 
p261_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/980606effcd29635307d6474718cd4a7ef016747/p261.py"
p261 = button2(p261_url)
doc["p261"].bind('click', p261.do)
################################## p261 end
################################## rocflag start
rocflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/0e2ca81d5c2539c4b6c86071c8cf9de0b1251b9c/roc_flag.py"
rocflag = button2(rocflag_url)
doc["rocflag"].bind("click", rocflag.do)
################################## rocflag end
################################## W13數字 start
W13數字_url = "https://gist.githubusercontent.com/snowfall-killer/118ba9a32402cef9a95936c4f9fb33c3/raw/87231d12ebde5ee686e632e5c0aeca922af243a3/W13-%25E6%2595%25B8%25E5%25AD%2597"
W13數字 = button2(W13數字_url)
doc["W13數字"].bind("click", W13數字.do)
################################## W13數字 end
################################## W13國字 start
W13國字_url = "https://gist.githubusercontent.com/snowfall-killer/5324f02bf629cc627a8563e68986e1ee/raw/8904fe813dfe584c08b61f86f231307bdd33be70/W13-%25E5%259C%258B%25E5%25AD%2597"
W13國字 = button2(W13國字_url)
doc["W13國字"].bind("click", W13國字.do)
################################## W13國字 end
</script>
</p><h2>run</h2>
<!-- 導入 brython 程式庫 -->
<script src="/get_page/cmsimde/static/brython.js"></script>
<script src="/get_page/cmsimde/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/get_page/cmsimde/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/get_page/cmsimde/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/get_page/cmsimde/static/ace/ace.js" type="text/javascript"></script>
<script src="/get_page/cmsimde/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/get_page/cmsimde/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/get_page/cmsimde/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- 印出版次與關鍵字程式 --></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd(ev):
    bd = doc["brython_div"]
    bd.clear()
# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/e896a4705a95ac8cc4147b355b0e87ef/raw/8954b8280c524c5781dc3c0b3565bc489d3aa3a3/cango_gear1.py"
    prog = open(url).read()
 
    # 將程式載入編輯區
    Ace.editor.setValue(prog)
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace.run()
 
# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
doc['clear_bd'].bind('click', clear_bd)
# 呼叫函式執行
run()
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<!-- 存擋表單開始 --><form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form><!-- 存擋表單結束 -->
<p></p>
<!-- 執行與清除按鈕開始 -->
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除輸出區</button><button id="clear_bd">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<!-- 執行與清除按鈕結束 -->
<p></p>
<!-- 程式執行 ouput 區 -->
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 -->
<div id="brython_div"></div>
<!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="https://mde.tw/cp2021/cmsimde/static/Cango-24v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/gearUtils-09.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/SVGpathUtils-6v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/sylvester.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/PrairieDraw.js"></script>
<h1>HW3</h1>
<p>HW3 - AI 貪食蛇佔學期成績 30%.</p>
<p><a href="https://github.com/mdecourse/cp2021/discussions/10">HW3 具體項目成果回報區</a></p>
<p>網際貪食蛇的逆襲, 誰的<a href="https://mde.tw/cp2021/content/run.html?src=https://gist.githubusercontent.com/mdecourse/d306a1f57e53bfd6466eaae20bcb9439/raw/2160a12b9fec9707a120a383ed5d38b9b78a02cf/snake.py">自動執行貪食蛇</a>能夠破紀錄? 目前直覺貪食蛇紀錄為 45 節 (除了蛇身節數外, 應該還要置入出現紅色標的物後的總完食時間).</p>
<p><a href="https://mde.tw/cp2021/content/run.html?src=https://gist.githubusercontent.com/mdecourse/d306a1f57e53bfd6466eaae20bcb9439/raw/f188098281ecaeedeea484c074ab34a05c3086eb/manual_snake.py">手動執行貪食蛇</a>程式說明與整理.</p>
<p><a href="https://mde.tw/cp2021/content/run.html?src=https://gist.githubusercontent.com/mdecourse/d306a1f57e53bfd6466eaae20bcb9439/raw/2160a12b9fec9707a120a383ed5d38b9b78a02cf/snake.py">自動執行貪食蛇</a>程式說明與整理.</p>
<p><a href="https://mde.tw/cp2021/content/run.html?src=https://gist.githubusercontent.com/mdecourse/d306a1f57e53bfd6466eaae20bcb9439/raw/2160a12b9fec9707a120a383ed5d38b9b78a02cf/snake.py">自動執行貪食蛇</a>程式的改進.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/HNf3fD9Dg9A" title="YouTube video player" width="560"></iframe></p>
<h4>參考資料:</h4>
<p style="padding-left: 30px;">可用於學習 Python 超過 1000 頁的 <a href="https://riptutorial.com/Download/python-language.pdf">free 電子書</a>, 也可以與<a href="https://mde.tw/cp2021/content/%E6%95%99%E7%A7%91%E6%9B%B8%E5%B0%8E%E8%AE%80.html">教科書導讀</a>一起配合研讀, 學習如何利用 Python 解題.</p>
<p style="padding-left: 30px;">文獻探討: <a href="https://towardsdatascience.com/training-a-snake-game-ai-a-literature-review-1cdddcd1862f">https://towardsdatascience.com/training-a-snake-game-ai-a-literature-review-1cdddcd1862f</a></p>
<p style="padding-left: 30px;">閱讀 <a href="/downloads/ai_snake_in_python.pdf">ai_snake_in_python.pdf</a> (長知識:-) 後, 將 <a href="/downloads/snake_pathfinding_ai/snake_pathfinding_ai_curses.py">snake_pathfinding_ai_curses.py</a> 改為 Brython 相容程式碼</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/snake_pathfinding_ai">https://github.com/mdecourse/snake_pathfinding_ai</a> (convert to Brython no.1)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/SnakeSolver">https://github.com/mdecourse/SnakeSolver</a> (convert to Brython no.2)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/Snaky">https://github.com/mdecourse/Snaky</a> (convert to Brython no.3)</p>
<p style="padding-left: 30px;"><a href="https://super9.space/archives/1562">以 Python 實作演算法</a></p>
<p style="padding-left: 30px;"><a href="/downloads/ai_snake_in_python.pdf">ai_snake_in_python.pdf</a> (<a href="https://hawstein.com/2013/04/15/snake-ai/">https://hawstein.com/2013/04/15/snake-ai/</a>, <a href="https://github.com/mdecourse/snake-ai">https://github.com/mdecourse/snake-ai</a>, 改為 Python3 後 <a href="/downloads/snake_pathfinding_ai/snake_pathfinding_ai_curses.py">snake_pathfinding_ai_curses.py</a> (<a href="https://gist.githubusercontent.com/mdecourse/fd325f7ff3fb71a9653bf156fe53d7dc/raw/21650f084b547ccc703bd0aec8267b1bfaacc841/snake_pathfinding_ai_curses.py">on Gist</a>), 有關 <a href="/downloads/snake_pathfinding_ai/PyCurses.pdf">Python curses.pdf</a>, 官方 <a href="https://docs.python.org/3/howto/curses.html">curses 模組說明</a>)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/slitherin">https://github.com/mdecourse/slitherin</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/python-game-snake">https://github.com/mdecourse/python-game-snake</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/ai-driven-snake-game-using-deep-q-learning/">https://www.geeksforgeeks.org/ai-driven-snake-game-using-deep-q-learning/</a></p>
<p style="padding-left: 30px;"><a href="https://craighaber.github.io/AI-for-Snake-Game/website_files/index.html">https://craighaber.github.io/AI-for-Snake-Game/website_files/index.html</a></p>
<p style="padding-left: 30px;"><a href="https://www.python-course.eu/snake_in_python.php">https://www.python-course.eu/snake_in_python.php</a></p>
<p style="padding-left: 30px;"><a href="https://techitsmart.ca/2020/05/18/teaching-ai-to-play-snake-using-python/">https://techitsmart.ca/2020/05/18/teaching-ai-to-play-snake-using-python/</a></p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2021/content/Task3.html">https://mde.tw/cp2021/content/Task3.html</a></p>
<p style="padding-left: 30px;">Brython snake 原始來源: <a href="https://medium.com/swlh/sick-of-javascript-just-use-browser-python-4b9679efe08b">https://medium.com/swlh/sick-of-javascript-just-use-browser-python-4b9679efe08b</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/snake-Q-Learning">https://github.com/mdecourse/snake-Q-Learning</a></p>
<p style="padding-left: 30px;"><a href="https://towardsdatascience.com/teaching-a-computer-how-to-play-snake-with-q-learning-93d0a316ddc0">https://towardsdatascience.com/teaching-a-computer-how-to-play-snake-with-q-learning-93d0a316ddc0</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/SnakeQlearning">https://github.com/mdecourse/SnakeQlearning</a></p>
<p style="padding-left: 30px;"><a href="https://medium.com/@italohdc/learnsnake-teaching-an-ai-to-play-snake-using-reinforcement-learning-q-learning-b63ac23dfdd1">https://medium.com/@italohdc/learnsnake-teaching-an-ai-to-play-snake-using-reinforcement-learning-q-learning-b63ac23dfdd1</a></p>
<p style="padding-left: 30px;"><a href="https://towardsdatascience.com/snake-played-by-a-deep-reinforcement-learning-agent-53f2c4331d36">https://towardsdatascience.com/snake-played-by-a-deep-reinforcement-learning-agent-53f2c4331d36</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/ai-driven-snake-game-using-deep-q-learning/">https://www.geeksforgeeks.org/ai-driven-snake-game-using-deep-q-learning/</a></p>
<p style="padding-left: 30px;"><a href="https://www3.hs-albsig.de/wordpress/point2pointmotion/2020/10/09/deep-reinforcement-learning-with-the-snake-game/">https://www3.hs-albsig.de/wordpress/point2pointmotion/2020/10/09/deep-reinforcement-learning-with-the-snake-game/</a></p>
<p style="padding-left: 30px;"><a href="/downloads/2016_Exploration of Reinforcement Learning to SNAKE.pdf">2016_Exploration of Reinforcement Learning to SNAKE.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/train_a_snake_with_reinforceme.pdf">train_a_snake_with_reinforceme.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://medium.com/@hugo.sjoberg88/using-reinforcement-learning-and-q-learning-to-play-snake-28423dd49e9b">https://medium.com/@hugo.sjoberg88/using-reinforcement-learning-and-q-learning-to-play-snake-28423dd49e9b</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/Snake-Reinforcement-Learning">https://github.com/mdecourse/Snake-Reinforcement-Learning</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Autonomous-Agents-in-Snake-Game-via-Deep-Reinforcement-Learning.pdf">Autonomous-Agents-in-Snake-Game-via-Deep-Reinforcement-Learning.pdf</a></p>
<h4>延伸應用:</h4>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/PJl4iabBEz0" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/5Vy5Dxu7vDs" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/6pJBPPrDO40" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/VGkcmBaeAGM" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://github.com/mdecourse/snake-ai-pytorch">https://github.com/mdecourse/snake-ai-pytorch</a></p>
<h2>Algorithms</h2>
<p>演算法 - <a href="https://web.ntnu.edu.tw/~algo/Algorithm.html">https://web.ntnu.edu.tw/~algo/Algorithm.html</a></p>
<p><a href="/downloads/data_structure_in_python.pdf">Data Structure in Python.pdf</a></p>
<p><a href="/downloads/data_structure_and_algorithm_in_CPP.pdf">Data Structure and Algorithm in Cpp.pdf</a></p>
<p><a href="/downloads/Algorithms.pdf">Algorithm.pdf</a></p>
<p><a href="https://introcs.cs.princeton.edu/python/40algorithms/">https://introcs.cs.princeton.edu/python/40algorithms/</a></p>
<p><a href="https://visualgo.net/en">VisualGo</a> (Visualization of Algorithm)</p>
<p><a href="/downloads/Principles of Algorithmic Problem Solving.pdf">Principles of Algorithmic Problem Solving.pdf</a></p>
<p>Foundation of Computer Science: <a href="http://infolab.stanford.edu/~ullman/focs.html">http://infolab.stanford.edu/~ullman/focs.html</a></p>
<p><a href="/downloads/open_data_structures.pdf">Open Data Structures.pdf</a></p>
<p>Free Programming books: <a href="https://ebookfoundation.github.io/free-programming-books/">https://ebookfoundation.github.io/free-programming-books/</a></p>
<p><a href="https://towardsdatascience.com/data-structures-algorithms-in-python-68c8dbb19c90">Python 的資料結構與演算法</a> (<a href="https://jovian.ai/learn/data-structures-and-algorithms-in-python">線上課程</a>)</p>
<p><a href="https://www.louisbourque.ca/AI-Snake-Game/">https://www.louisbourque.ca/AI-Snake-Game/</a></p>
<p><a href="https://hawstein.com/2013/04/15/snake-ai/">https://hawstein.com/2013/04/15/snake-ai/</a></p>
<p><a href="https://en.wikipedia.org/wiki/Depth-first_search">https://en.wikipedia.org/wiki/Depth-first_search</a></p>
<p><a href="https://favtutor.com/blogs/depth-first-search-python">https://favtutor.com/blogs/depth-first-search-python</a></p>
<p><a href="https://github.com/mdecourse/snake_pathfinding_ai">https://github.com/mdecourse/snake_pathfinding_ai</a></p>
<p><a href="https://super9.space/archives/1562">https://super9.space/archives/1562</a></p>
<p><a href="https://reposhub.com/python/game-development/memoiry-Snaky.html">https://reposhub.com/python/game-development/memoiry-Snaky.html</a></p>
<p><a href="https://github.com/mdecourse/python-game-snake">https://github.com/mdecourse/python-game-snake</a></p>
<p><a href="https://www.geeksforgeeks.org/ai-driven-snake-game-using-deep-q-learning/">https://www.geeksforgeeks.org/ai-driven-snake-game-using-deep-q-learning/</a></p>
<p><a href="https://craighaber.github.io/AI-for-Snake-Game/website_files/index.html">https://craighaber.github.io/AI-for-Snake-Game/website_files/index.html</a></p>
<p><a href="https://www.python-course.eu/snake_in_python.php">https://www.python-course.eu/snake_in_python.php</a></p>
<p><a href="https://techitsmart.ca/2020/05/18/teaching-ai-to-play-snake-using-python/">https://techitsmart.ca/2020/05/18/teaching-ai-to-play-snake-using-python/</a></p>
<p><a href="https://www.geeksforgeeks.org/snake-ladder-problem-2/">https://www.geeksforgeeks.org/snake-ladder-problem-2/</a> <span style="background-color: #ffff99;"><br/></span></p>
<h4>資料結構:</h4>
<p style="padding-left: 30px;"><a href="https://www.aupress.ca/books/120226-open-data-structures/">https://www.aupress.ca/books/120226-open-data-structures/</a></p>
<h3>Practice1</h3>
<p>這一頁將利用常用的 Python 程式語法解題 (<a href="/downloads/Practice1.txt">Practice1.txt</a>):</p>
<p>初學者程式:</p>
<p style="padding-left: 30px;"><span style="background-color: #ffff99;">整數累加:</span> 例如從 1 累加到 10, 最簡單且直覺的解法, 就是直接將 1 加到 10, 然後印出結果.</p>
<p style="padding-left: 30px;">但是若題目需要累加到較大數值 (例如: 100), 程式編寫過程將會浪費許多時間, 若能善用變數設定, 變數加法, for 重複迴圈, range() 函式 (<a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">運作說明</a>) 以及整數轉為字串的用法, 將程式改寫成: <button id="add1to100">1 add to 100</button>, 就可以省下許多時間.</p>
<p>初學者程式:</p>
<p style="padding-left: 30px;">第二個範例為<span style="background-color: #ffff99;">字串內容查驗</span>: 利用輸入表單, 要求使用者輸入至少8個字元字串, 必須包含大小寫英文字母, 數字以及特殊符號, <button id="check_input">查驗輸入字串</button> 程式碼導入後, 可按下 Run 後執行.</p>
<p>進階程式: <a href="https://www.notion.so/lenchen/LeetCode-47d625b874894484af7c055b024b9817">LeetCode in Python</a> (<a href="https://ptthito.com/tech_job/m-1627032526-a-554/">來源</a>)</p>
<!-- 導入 brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- 印出版次與關鍵字程式 --></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd(ev):
    bd = doc["brython_div"]
    bd.clear()
# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace.editor.setValue(prog)
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
doc['clear_bd'].bind('click', clear_bd)
# 呼叫函式執行
run()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace
# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace.editor.setValue(add_src)
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
    Ace.run()
# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<p><!-- 判斷輸入字串是否aA1$, 且至少 8 個字元-開始 -->
<script type="text/python3">
from browser import document as doc
import ace
import time

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )

check_str_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/56dc6a6b8eaa05b80994ac6f08ebc9326330be43/check_str_input_content_1.py"
# 從 gist 取得程式碼
check_src = open(check_str_url).read()

def check_input(ev):
    Ace.editor.setValue(check_src)
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
    #Ace.run()

# id 為 "check_input" 的按鈕點按時, 執行 check_input 方法
doc["check_input"].bind('click', check_input)
</script>
</p>
<p><!-- 判斷輸入字串是否aA1$, 且至少 8 個字元-結束--></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除輸出區</button><button id="clear_bd">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<div id="brython_div"></div>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="https://mde.tw/cp2021/cmsimde/static/Cango-24v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/gearUtils-09.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/SVGpathUtils-6v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/sylvester.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/PrairieDraw.js"></script>
</p>
<h3>Practice2</h3>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- 第 1 區內建程式 #################################### 第 1 區內建程式開始-->
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
<!-- 第 1 區內建程式 #################################### 第 1 區內建程式結束--></p>
<!-- 第 1 區程式 ########################################### 第 1 區程式開始-->
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()
# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- 第 1 區程式 ########################################### 第 1 區程式結束 -->
<p></p>
<!-- 第 2 區程式 ########################################### 第 2 區程式開始-->
<p>查驗輸入字串程式:</p>
<p><button id="check_input">查驗輸入字串</button></p>
<p><!-- 判斷輸入字串是否aA1$, 且至少 8 個字元-開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

check_str_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/56dc6a6b8eaa05b80994ac6f08ebc9326330be43/check_str_input_content_1.py"
# 從 gist 取得程式碼
check_src = open(check_str_url).read()

def check_input(ev):
    Ace3.editor.setValue(check_src)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    #Ace.run()

# id 為 "check_input" 的按鈕點按時, 執行 check_input 方法
doc["check_input"].bind('click', check_input)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- 判斷輸入字串是否aA1$, 且至少 8 個字元-結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 -->
<p></p>
<!-- 第 3 區程式 ########################################### 第 3 區程式開始-->
<p>Leetcode 13: <a href="https://leetcode.com/problems/roman-to-integer/">https://leetcode.com/problems/roman-to-integer/</a> (<a href="https://www.notion.so/Array-String-9be4f4243ca94603ae980f78083bf595#c2b8e6f6d12d4968a1d6524e74f4c2e6">Solution</a>)</p>
<p></p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="https://mde.tw/cp2021/cmsimde/static/Cango-24v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/gearUtils-09.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/SVGpathUtils-6v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/sylvester.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/PrairieDraw.js"></script>
</p>
<h3>Practice3</h3>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;<span></span>
&lt;script&gt;<span></span>
window.onload=function(){<span></span>
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});<span></span>
}<span></span>
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()
# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/>
<p>查驗輸入字串程式:</p>
<p><button id="check_input">查驗輸入字串</button></p>
<p><!-- 判斷輸入字串是否aA1$, 且至少 8 個字元-開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

check_str_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/56dc6a6b8eaa05b80994ac6f08ebc9326330be43/check_str_input_content_1.py"
# 從 gist 取得程式碼
check_src = open(check_str_url).read()

def check_input(ev):
    Ace3.editor.setValue(check_src)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    #Ace.run()

# id 為 "check_input" 的按鈕點按時, 執行 check_input 方法
doc["check_input"].bind('click', check_input)

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- 判斷輸入字串是否aA1$, 且至少 8 個字元-結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 -->
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="https://mde.tw/cp2021/cmsimde/static/Cango-24v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/gearUtils-09.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/SVGpathUtils-6v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/sylvester.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/PrairieDraw.js"></script>
</p>
<h2>Path Finding</h2>
<p><a href="https://github.com/mdecourse/snake_pathfinding_ai">https://github.com/mdecourse/snake_pathfinding_ai</a></p>
<p><a href="https://gist.githubusercontent.com/mdecourse/b5df54ab3d5f2f079f785541d1178a66/raw/12d55378630416e4e65a5d9f1262402a09e2d45d/snake_ai_bfs.py">snake_ai_bfs.py</a></p>
<p>何謂 BFS (<a href="https://en.wikipedia.org/wiki/Breadth-first_search">Breadth-First Search</a>) algorithm?</p>
<p>Breadth-first search (BFS, 廣度優先搜尋) is an algorithm for searching a tree data structure for a node that satisfies a given property. It starts at the tree root and explores all nodes at the present depth prior to moving on to the nodes at the next depth level. Extra memory, usually a queue, is needed to keep track of the child nodes that were encountered but not yet explored.</p>
<p><a href="https://www.educative.io/edpresso/how-to-implement-a-breadth-first-search-in-python">以 Python 實現 BFS</a></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">graph = {<span></span>
  'A' : ['B','C'],<span></span>
  'B' : ['D', 'E'],<span></span>
  'C' : ['F'],<span></span>
  'D' : [],<span></span>
  'E' : ['F'],<span></span>
  'F' : []<span></span>
}<span></span>
<span></span>
visited = [] # List to keep track of visited nodes.<span></span>
queue = []     #Initialize a queue<span></span>
<span></span>
def bfs(visited, graph, node):<span></span>
  visited.append(node)<span></span>
  queue.append(node)<span></span>
<span></span>
  while queue:<span></span>
    s = queue.pop(0) <span></span>
    print (s, end = " ") <span></span>
<span></span>
    for neighbour in graph[s]:<span></span>
      if neighbour not in visited:<span></span>
        visited.append(neighbour)<span></span>
        queue.append(neighbour)<span></span>
<span></span>
# Driver Code<span></span>
bfs(visited, graph, 'A')</pre>
<p>Lines 3-10: The illustrated graph is represented using an adjacency list. An easy way to do this in Python is to use a dictionary data structure, where each vertex has a stored list of its adjacent nodes.<br/><br/>Line 12: visited is a list that is used to keep track of visited nodes.<br/><br/>Line 13: queue is a list that is used to keep track of nodes currently in the queue.</p>
<p>Line 29: The arguments of the bfs function are the visited list, the graph in the form of a dictionary, and the starting node A.</p>
<p>Lines 15-26: bfs follows the algorithm described above:</p>
<p>It checks and appends the starting node to the visited list and the queue.</p>
<p>Then, while the queue contains elements, it keeps taking out nodes from the queue, appends the neighbors of that node to the queue if they are unvisited, and marks them as visited.</p>
<p>This continues until the queue is empty.</p>
<h2>ML in Brython</h2>
<p><a href="https://www.analyticsvidhya.com/blog/2021/07/python-on-frontend-ml-models-web-interface-with-brython/">https://www.analyticsvidhya.com/blog/2021/07/python-on-frontend-ml-models-web-interface-with-brython/</a></p>
<p><a href="https://github.com/mdecourse/Brython-ML">https://github.com/mdecourse/Brython-ML</a> </p>
<h2>Math</h2>
<p><a href="https://open.umn.edu/opentextbooks/textbooks/precalculus-an-investigation-of-functions">https://open.umn.edu/opentextbooks/textbooks/precalculus-an-investigation-of-functions</a></p>
<h1>Final Project</h1>
<p>Final Project 佔學期成績 30%</p>
<p><a href="https://github.com/mdecourse/cp2021/discussions/11">Final Project 具體項目成果回報區</a></p>
<p>利用 Brython 寫一個會<span style="background-color: #ffff99;">令人想玩</span>的網際遊戲.</p>
<h4>參考章節:</h4>
<ol>
<li><a href="https://www.enago.tw/academy/%E5%A6%82%E4%BD%95%E6%92%B0%E5%AF%AB%E6%91%98%E8%A6%81%EF%BC%9F/">專題摘要</a></li>
<li><a href="https://ctld.ntu.edu.tw/ls/strategy/lecture.php?index=126">資料蒐集</a></li>
<li><a href="http://old.gst.org.tw/WPES/guideline_D-a.htm">設計動機</a></li>
<li><a href="https://wordvice.com.tw/%E5%A6%82%E4%BD%95%E5%AF%AB%E5%A5%BD%E8%AB%96%E6%96%87%E4%B8%AD%E7%9A%84%E3%80%8C%E7%A0%94%E7%A9%B6%E6%96%B9%E6%B3%95%E3%80%8D/">設計方法</a></li>
<li><a href="http://microbiology.scu.edu.tw/MIB/wong/courses/writing/result02.htm">結果與討論</a></li>
<li><a href="https://www.enago.tw/academy/what-you-need-to-know-about-the-manuscript-appendix/">附錄</a></li>
</ol>
<h4>參考資料:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/collections/web-games">https://github.com/collections/web-games</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/topics/web-game">https://github.com/topics/web-game</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/topics/browser-game">https://github.com/topics/browser-game</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/leereilly/games">https://github.com/leereilly/games</a></p>
<p style="padding-left: 30px;"><a href="https://bmsleight.github.io/brython-blocks/">https://bmsleight.github.io/brython-blocks/</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/brython-blocks"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">https://github.com/mdecourse/brython-blocks</span></span></a></p>
<p style="padding-left: 30px;"><span style="background-color: #ffff99;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">下一個階段將要導入</span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><a href="https://github.com/pyodide/pyodide">https://github.com/pyodide/pyodide</a><a href="https://github.com/pyodide/pyodide"></a></span></span></span></p>
<h1>41023218</h1>
<p></p>
<!-- 導入 brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="https://mde.tw/cp2021/cmsimde/static/Cango-24v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/gearUtils-09.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/SVGpathUtils-6v03-min.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/sylvester.js"></script>
<script src="https://mde.tw/cp2021/cmsimde/static/PrairieDraw.js"></script>
</p>
<p><button id="Final1">Final1</button><button id="Final2">Final2</button></p>
<p><!-- ######################  editor1 開始 ###################### --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<!-- 這裡的畫布 id 為 brython_div -->
<div id="brython_div"></div>
<p><!-- ######################  editor1 結束 ###################### --></p>
<p></p>
<!-- 以下可以開始利用 editor1 的設定編寫對應 Brython 程式 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    # 注意這裡清除的畫布 id 為 brython_div
    bd = doc["brython_div"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
<!-- 以上為內建程式, 頁面可透過 ?src=gist_url 執行 -->
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace2.editor.setValue(open(self.url).read())
        Ace2.editor.scrollToRow(0)
        Ace2.editor.gotoLine(0)
        Ace2.run()
################################# Final 1 start
Final1_url = "https://gist.githubusercontent.com/snowfall-killer/eddd14f890da1d2a7c702746e90af4fb/raw/cda60221b63c5c1752f8a7337169a369c6b3cabb/Final%25201"
Final1 = button2(Final1_url)
doc["Final1"].bind('click', Final1.do)
################################# Final 1 end
################################# Final 2 start
Final2_url =  "https://gist.githubusercontent.com/snowfall-killer/74a609a2e1de840f149cf938e01aff59/raw/9739436e88d8d524b51244a04cc88542282ec265/final%25202"
Final2 = button2(Final2_url)
doc["Final2"].bind('click', Final2.do)
################################# Final 2 end
</script>
</p>